
UART-Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b60  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003d60  08003d60  00004d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de4  08003de4  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003de4  08003de4  00004de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dec  08003dec  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dec  08003dec  00004dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003df0  08003df0  00004df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003df4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000068  08003e5c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003e5c  00005260  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009668  00000000  00000000  00005096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a4  00000000  00000000  0000e6fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  0000fea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b7  00000000  00000000  00010630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027678  00000000  00000000  00010be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a251  00000000  00000000  0003825f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2898  00000000  00000000  000424b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134d48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000253c  00000000  00000000  00134d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001372c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08003d48 	.word	0x08003d48

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08003d48 	.word	0x08003d48

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005d4:	f000 f916 	bl	8000804 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fad7 	bl	8000b8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f81c 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f8a6 	bl	8000730 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e4:	f000 f874 	bl	80006d0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Bootloader (%d.%d)\n", BL_Version[0], BL_Version[1]);
 80005e8:	2300      	movs	r3, #0
 80005ea:	2201      	movs	r2, #1
 80005ec:	4619      	mov	r1, r3
 80005ee:	4808      	ldr	r0, [pc, #32]	@ (8000610 <main+0x40>)
 80005f0:	f002 fcde 	bl	8002fb0 <iprintf>
  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_0, GPIO_PIN_SET );
 80005f4:	2201      	movs	r2, #1
 80005f6:	2101      	movs	r1, #1
 80005f8:	4806      	ldr	r0, [pc, #24]	@ (8000614 <main+0x44>)
 80005fa:	f000 fe55 	bl	80012a8 <HAL_GPIO_WritePin>
  HAL_Delay(2000);		// 2 Second Delay
 80005fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000602:	f000 fb1f 	bl	8000c44 <HAL_Delay>

  start_application();
 8000606:	f000 f8e3 	bl	80007d0 <start_application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060a:	bf00      	nop
 800060c:	e7fd      	b.n	800060a <main+0x3a>
 800060e:	bf00      	nop
 8000610:	08003d60 	.word	0x08003d60
 8000614:	40020400 	.word	0x40020400

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2234      	movs	r2, #52	@ 0x34
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fe0a 	bl	8003240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <SystemClock_Config+0xb0>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	4a21      	ldr	r2, [pc, #132]	@ (80006c8 <SystemClock_Config+0xb0>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	@ 0x40
 8000648:	4b1f      	ldr	r3, [pc, #124]	@ (80006c8 <SystemClock_Config+0xb0>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000654:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemClock_Config+0xb4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800065c:	4a1b      	ldr	r2, [pc, #108]	@ (80006cc <SystemClock_Config+0xb4>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b19      	ldr	r3, [pc, #100]	@ (80006cc <SystemClock_Config+0xb4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fe29 	bl	80012dc <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000690:	f000 f8e4 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 f8c2 	bl	8001838 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ba:	f000 f8cf 	bl	800085c <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	@ 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 80006d6:	4a15      	ldr	r2, [pc, #84]	@ (800072c <MX_USART3_UART_Init+0x5c>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006da:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_USART3_UART_Init+0x58>)
 8000714:	f001 fe9e 	bl	8002454 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800071e:	f000 f89d 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000084 	.word	0x20000084
 800072c:	40004800 	.word	0x40004800

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <MX_GPIO_Init+0x74>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a16      	ldr	r2, [pc, #88]	@ (80007a4 <MX_GPIO_Init+0x74>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_GPIO_Init+0x74>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_GPIO_Init+0x74>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a10      	ldr	r2, [pc, #64]	@ (80007a4 <MX_GPIO_Init+0x74>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_GPIO_Init+0x74>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2101      	movs	r1, #1
 800077a:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <MX_GPIO_Init+0x78>)
 800077c:	f000 fd94 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000780:	2301      	movs	r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <MX_GPIO_Init+0x78>)
 8000798:	f000 fbda 	bl	8000f50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020400 	.word	0x40020400

080007ac <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007b4:	1d39      	adds	r1, r7, #4
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	2201      	movs	r2, #1
 80007bc:	4803      	ldr	r0, [pc, #12]	@ (80007cc <__io_putchar+0x20>)
 80007be:	f001 fe97 	bl	80024f0 <HAL_UART_Transmit>

  return ch;
 80007c2:	687b      	ldr	r3, [r7, #4]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000084 	.word	0x20000084

080007d0 <start_application>:

static void start_application ( void )
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
	printf("Starting Application\n");
 80007d6:	4808      	ldr	r0, [pc, #32]	@ (80007f8 <start_application+0x28>)
 80007d8:	f002 fc52 	bl	8003080 <puts>

	void (*app_reset_handler) (void) = (void*) ( *(volatile uint32_t *) (0x08040000 + 4));
 80007dc:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <start_application+0x2c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	607b      	str	r3, [r7, #4]

	// To set stack address manually (for some microcontrollers)
	// __set_MSP( ( *(volatile uint32_t *) 0x08000000) );

	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );		//Green LED OFF
 80007e2:	2200      	movs	r2, #0
 80007e4:	2101      	movs	r1, #1
 80007e6:	4806      	ldr	r0, [pc, #24]	@ (8000800 <start_application+0x30>)
 80007e8:	f000 fd5e 	bl	80012a8 <HAL_GPIO_WritePin>
	app_reset_handler();
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4798      	blx	r3
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	08003d80 	.word	0x08003d80
 80007fc:	08040004 	.word	0x08040004
 8000800:	40020400 	.word	0x40020400

08000804 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800080a:	463b      	mov	r3, r7
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000816:	f000 fb1f 	bl	8000e58 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800081a:	2301      	movs	r3, #1
 800081c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800081e:	2300      	movs	r3, #0
 8000820:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000826:	231f      	movs	r3, #31
 8000828:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800082a:	2387      	movs	r3, #135	@ 0x87
 800082c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800082e:	2300      	movs	r3, #0
 8000830:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000832:	2300      	movs	r3, #0
 8000834:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000836:	2301      	movs	r3, #1
 8000838:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800083a:	2301      	movs	r3, #1
 800083c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000846:	463b      	mov	r3, r7
 8000848:	4618      	mov	r0, r3
 800084a:	f000 fb3d 	bl	8000ec8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800084e:	2004      	movs	r0, #4
 8000850:	f000 fb1a 	bl	8000e88 <HAL_MPU_Enable>

}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <Error_Handler+0x8>

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <HAL_MspInit+0x44>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	4a0e      	ldr	r2, [pc, #56]	@ (80008ac <HAL_MspInit+0x44>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	@ 0x40
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <HAL_MspInit+0x44>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <HAL_MspInit+0x44>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088a:	4a08      	ldr	r2, [pc, #32]	@ (80008ac <HAL_MspInit+0x44>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000890:	6453      	str	r3, [r2, #68]	@ 0x44
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_MspInit+0x44>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b0ae      	sub	sp, #184	@ 0xb8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2290      	movs	r2, #144	@ 0x90
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 fcb5 	bl	8003240 <memset>
  if(huart->Instance==USART3)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a22      	ldr	r2, [pc, #136]	@ (8000964 <HAL_UART_MspInit+0xb4>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d13c      	bne.n	800095a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80008e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4618      	mov	r0, r3
 80008f0:	f001 f988 	bl	8001c04 <HAL_RCCEx_PeriphCLKConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008fa:	f7ff ffaf 	bl	800085c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <HAL_UART_MspInit+0xb8>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000902:	4a19      	ldr	r2, [pc, #100]	@ (8000968 <HAL_UART_MspInit+0xb8>)
 8000904:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000908:	6413      	str	r3, [r2, #64]	@ 0x40
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <HAL_UART_MspInit+0xb8>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <HAL_UART_MspInit+0xb8>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a13      	ldr	r2, [pc, #76]	@ (8000968 <HAL_UART_MspInit+0xb8>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <HAL_UART_MspInit+0xb8>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800092e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000948:	2307      	movs	r3, #7
 800094a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	@ (800096c <HAL_UART_MspInit+0xbc>)
 8000956:	f000 fafb 	bl	8000f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800095a:	bf00      	nop
 800095c:	37b8      	adds	r7, #184	@ 0xb8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40004800 	.word	0x40004800
 8000968:	40023800 	.word	0x40023800
 800096c:	40020c00 	.word	0x40020c00

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <NMI_Handler+0x4>

08000978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <MemManage_Handler+0x4>

08000988 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <UsageFault_Handler+0x4>

08000998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c6:	f000 f91d 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}

080009ce <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b086      	sub	sp, #24
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	60f8      	str	r0, [r7, #12]
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	e00a      	b.n	80009f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009e0:	f3af 8000 	nop.w
 80009e4:	4601      	mov	r1, r0
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	1c5a      	adds	r2, r3, #1
 80009ea:	60ba      	str	r2, [r7, #8]
 80009ec:	b2ca      	uxtb	r2, r1
 80009ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	3301      	adds	r3, #1
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	dbf0      	blt.n	80009e0 <_read+0x12>
  }

  return len;
 80009fe:	687b      	ldr	r3, [r7, #4]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	e009      	b.n	8000a2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	1c5a      	adds	r2, r3, #1
 8000a1e:	60ba      	str	r2, [r7, #8]
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fec2 	bl	80007ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	697a      	ldr	r2, [r7, #20]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	dbf1      	blt.n	8000a1a <_write+0x12>
  }
  return len;
 8000a36:	687b      	ldr	r3, [r7, #4]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <_close>:

int _close(int file)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a68:	605a      	str	r2, [r3, #4]
  return 0;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <_isatty>:

int _isatty(int file)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a80:	2301      	movs	r3, #1
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b085      	sub	sp, #20
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	60f8      	str	r0, [r7, #12]
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a9a:	2300      	movs	r3, #0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	@ (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d207      	bcs.n	8000ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad8:	f002 fc00 	bl	80032dc <__errno>
 8000adc:	4603      	mov	r3, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a05      	ldr	r2, [pc, #20]	@ (8000b0c <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20080000 	.word	0x20080000
 8000b08:	00000400 	.word	0x00000400
 8000b0c:	2000010c 	.word	0x2000010c
 8000b10:	20000260 	.word	0x20000260

08000b14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b3c:	480d      	ldr	r0, [pc, #52]	@ (8000b74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b3e:	490e      	ldr	r1, [pc, #56]	@ (8000b78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b40:	4a0e      	ldr	r2, [pc, #56]	@ (8000b7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0b      	ldr	r2, [pc, #44]	@ (8000b80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b54:	4c0b      	ldr	r4, [pc, #44]	@ (8000b84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b62:	f7ff ffd7 	bl	8000b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b66:	f002 fbbf 	bl	80032e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fd31 	bl	80005d0 <main>
  bx  lr    
 8000b6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b70:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b7c:	08003df4 	.word	0x08003df4
  ldr r2, =_sbss
 8000b80:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b84:	20000260 	.word	0x20000260

08000b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC_IRQHandler>

08000b8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b8e:	2003      	movs	r0, #3
 8000b90:	f000 f92e 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b94:	200f      	movs	r0, #15
 8000b96:	f000 f805 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9a:	f7ff fe65 	bl	8000868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <HAL_InitTick+0x54>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <HAL_InitTick+0x58>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f93b 	bl	8000e3e <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00e      	b.n	8000bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d80a      	bhi.n	8000bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f000 f911 	bl	8000e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be4:	4a06      	ldr	r2, [pc, #24]	@ (8000c00 <HAL_InitTick+0x5c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e000      	b.n	8000bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000004 	.word	0x20000004

08000c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_IncTick+0x20>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <HAL_IncTick+0x24>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <HAL_IncTick+0x24>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000110 	.word	0x20000110

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b03      	ldr	r3, [pc, #12]	@ (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000110 	.word	0x20000110

08000c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c4c:	f7ff ffee 	bl	8000c2c <HAL_GetTick>
 8000c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c5c:	d005      	beq.n	8000c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <HAL_Delay+0x44>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c6a:	bf00      	nop
 8000c6c:	f7ff ffde 	bl	8000c2c <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d8f7      	bhi.n	8000c6c <HAL_Delay+0x28>
  {
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008

08000c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <__NVIC_SetPriorityGrouping+0x40>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	@ (8000ccc <__NVIC_SetPriorityGrouping+0x40>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00
 8000cd0:	05fa0000 	.word	0x05fa0000

08000cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd8:	4b04      	ldr	r3, [pc, #16]	@ (8000cec <__NVIC_GetPriorityGrouping+0x18>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	f003 0307 	and.w	r3, r3, #7
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	@ (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	@ (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	@ 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	@ 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dbc:	d301      	bcc.n	8000dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00f      	b.n	8000de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <SysTick_Config+0x40>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dca:	210f      	movs	r1, #15
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f7ff ff8e 	bl	8000cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <SysTick_Config+0x40>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	4b04      	ldr	r3, [pc, #16]	@ (8000dec <SysTick_Config+0x40>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff47 	bl	8000c8c <__NVIC_SetPriorityGrouping>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff5c 	bl	8000cd4 <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff8e 	bl	8000d44 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5d 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ffb0 	bl	8000dac <SysTick_Config>
 8000e4c:	4603      	mov	r3, r0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000e5c:	f3bf 8f5f 	dmb	sy
}
 8000e60:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000e62:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <HAL_MPU_Disable+0x28>)
 8000e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e66:	4a06      	ldr	r2, [pc, #24]	@ (8000e80 <HAL_MPU_Disable+0x28>)
 8000e68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e6c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000e6e:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <HAL_MPU_Disable+0x2c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	605a      	str	r2, [r3, #4]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00
 8000e84:	e000ed90 	.word	0xe000ed90

08000e88 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000e90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec0 <HAL_MPU_Enable+0x38>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_MPU_Enable+0x3c>)
 8000e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e9e:	4a09      	ldr	r2, [pc, #36]	@ (8000ec4 <HAL_MPU_Enable+0x3c>)
 8000ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ea4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea6:	f3bf 8f4f 	dsb	sy
}
 8000eaa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eac:	f3bf 8f6f 	isb	sy
}
 8000eb0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed90 	.word	0xe000ed90
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	785a      	ldrb	r2, [r3, #1]
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f4c <HAL_MPU_ConfigRegion+0x84>)
 8000ed6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d029      	beq.n	8000f34 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f4c <HAL_MPU_ConfigRegion+0x84>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7b1b      	ldrb	r3, [r3, #12]
 8000eec:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	7adb      	ldrb	r3, [r3, #11]
 8000ef2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ef4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	7a9b      	ldrb	r3, [r3, #10]
 8000efa:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000efc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7b5b      	ldrb	r3, [r3, #13]
 8000f02:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f04:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7b9b      	ldrb	r3, [r3, #14]
 8000f0a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f0c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	7bdb      	ldrb	r3, [r3, #15]
 8000f12:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f14:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7a5b      	ldrb	r3, [r3, #9]
 8000f1a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f1c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	7a1b      	ldrb	r3, [r3, #8]
 8000f22:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f24:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	7812      	ldrb	r2, [r2, #0]
 8000f2a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f2c:	4a07      	ldr	r2, [pc, #28]	@ (8000f4c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f2e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f30:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000f32:	e005      	b.n	8000f40 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <HAL_MPU_ConfigRegion+0x84>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000f3a:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <HAL_MPU_ConfigRegion+0x84>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed90 	.word	0xe000ed90

08000f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	@ 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	e175      	b.n	800125c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f040 8164 	bne.w	8001256 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d005      	beq.n	8000fa6 <HAL_GPIO_Init+0x56>
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d130      	bne.n	8001008 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	f003 0201 	and.w	r2, r3, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b03      	cmp	r3, #3
 8001012:	d017      	beq.n	8001044 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d123      	bne.n	8001098 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	69b9      	ldr	r1, [r7, #24]
 8001094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0203 	and.w	r2, r3, #3
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80be 	beq.w	8001256 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	4b66      	ldr	r3, [pc, #408]	@ (8001274 <HAL_GPIO_Init+0x324>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010de:	4a65      	ldr	r2, [pc, #404]	@ (8001274 <HAL_GPIO_Init+0x324>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010e6:	4b63      	ldr	r3, [pc, #396]	@ (8001274 <HAL_GPIO_Init+0x324>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010f2:	4a61      	ldr	r2, [pc, #388]	@ (8001278 <HAL_GPIO_Init+0x328>)
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	220f      	movs	r2, #15
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a58      	ldr	r2, [pc, #352]	@ (800127c <HAL_GPIO_Init+0x32c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d037      	beq.n	800118e <HAL_GPIO_Init+0x23e>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a57      	ldr	r2, [pc, #348]	@ (8001280 <HAL_GPIO_Init+0x330>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d031      	beq.n	800118a <HAL_GPIO_Init+0x23a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a56      	ldr	r2, [pc, #344]	@ (8001284 <HAL_GPIO_Init+0x334>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d02b      	beq.n	8001186 <HAL_GPIO_Init+0x236>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a55      	ldr	r2, [pc, #340]	@ (8001288 <HAL_GPIO_Init+0x338>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d025      	beq.n	8001182 <HAL_GPIO_Init+0x232>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a54      	ldr	r2, [pc, #336]	@ (800128c <HAL_GPIO_Init+0x33c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d01f      	beq.n	800117e <HAL_GPIO_Init+0x22e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a53      	ldr	r2, [pc, #332]	@ (8001290 <HAL_GPIO_Init+0x340>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d019      	beq.n	800117a <HAL_GPIO_Init+0x22a>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a52      	ldr	r2, [pc, #328]	@ (8001294 <HAL_GPIO_Init+0x344>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d013      	beq.n	8001176 <HAL_GPIO_Init+0x226>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a51      	ldr	r2, [pc, #324]	@ (8001298 <HAL_GPIO_Init+0x348>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d00d      	beq.n	8001172 <HAL_GPIO_Init+0x222>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a50      	ldr	r2, [pc, #320]	@ (800129c <HAL_GPIO_Init+0x34c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d007      	beq.n	800116e <HAL_GPIO_Init+0x21e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4f      	ldr	r2, [pc, #316]	@ (80012a0 <HAL_GPIO_Init+0x350>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <HAL_GPIO_Init+0x21a>
 8001166:	2309      	movs	r3, #9
 8001168:	e012      	b.n	8001190 <HAL_GPIO_Init+0x240>
 800116a:	230a      	movs	r3, #10
 800116c:	e010      	b.n	8001190 <HAL_GPIO_Init+0x240>
 800116e:	2308      	movs	r3, #8
 8001170:	e00e      	b.n	8001190 <HAL_GPIO_Init+0x240>
 8001172:	2307      	movs	r3, #7
 8001174:	e00c      	b.n	8001190 <HAL_GPIO_Init+0x240>
 8001176:	2306      	movs	r3, #6
 8001178:	e00a      	b.n	8001190 <HAL_GPIO_Init+0x240>
 800117a:	2305      	movs	r3, #5
 800117c:	e008      	b.n	8001190 <HAL_GPIO_Init+0x240>
 800117e:	2304      	movs	r3, #4
 8001180:	e006      	b.n	8001190 <HAL_GPIO_Init+0x240>
 8001182:	2303      	movs	r3, #3
 8001184:	e004      	b.n	8001190 <HAL_GPIO_Init+0x240>
 8001186:	2302      	movs	r3, #2
 8001188:	e002      	b.n	8001190 <HAL_GPIO_Init+0x240>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <HAL_GPIO_Init+0x240>
 800118e:	2300      	movs	r3, #0
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	f002 0203 	and.w	r2, r2, #3
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	4093      	lsls	r3, r2
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011a0:	4935      	ldr	r1, [pc, #212]	@ (8001278 <HAL_GPIO_Init+0x328>)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ae:	4b3d      	ldr	r3, [pc, #244]	@ (80012a4 <HAL_GPIO_Init+0x354>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011d2:	4a34      	ldr	r2, [pc, #208]	@ (80012a4 <HAL_GPIO_Init+0x354>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d8:	4b32      	ldr	r3, [pc, #200]	@ (80012a4 <HAL_GPIO_Init+0x354>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011fc:	4a29      	ldr	r2, [pc, #164]	@ (80012a4 <HAL_GPIO_Init+0x354>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001202:	4b28      	ldr	r3, [pc, #160]	@ (80012a4 <HAL_GPIO_Init+0x354>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001226:	4a1f      	ldr	r2, [pc, #124]	@ (80012a4 <HAL_GPIO_Init+0x354>)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800122c:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <HAL_GPIO_Init+0x354>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001250:	4a14      	ldr	r2, [pc, #80]	@ (80012a4 <HAL_GPIO_Init+0x354>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3301      	adds	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	2b0f      	cmp	r3, #15
 8001260:	f67f ae86 	bls.w	8000f70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3724      	adds	r7, #36	@ 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40013800 	.word	0x40013800
 800127c:	40020000 	.word	0x40020000
 8001280:	40020400 	.word	0x40020400
 8001284:	40020800 	.word	0x40020800
 8001288:	40020c00 	.word	0x40020c00
 800128c:	40021000 	.word	0x40021000
 8001290:	40021400 	.word	0x40021400
 8001294:	40021800 	.word	0x40021800
 8001298:	40021c00 	.word	0x40021c00
 800129c:	40022000 	.word	0x40022000
 80012a0:	40022400 	.word	0x40022400
 80012a4:	40013c00 	.word	0x40013c00

080012a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
 80012b4:	4613      	mov	r3, r2
 80012b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b8:	787b      	ldrb	r3, [r7, #1]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012be:	887a      	ldrh	r2, [r7, #2]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80012c4:	e003      	b.n	80012ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	041a      	lsls	r2, r3, #16
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	619a      	str	r2, [r3, #24]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80012e4:	2300      	movs	r3, #0
 80012e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e29b      	b.n	800182a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 8087 	beq.w	800140e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001300:	4b96      	ldr	r3, [pc, #600]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b04      	cmp	r3, #4
 800130a:	d00c      	beq.n	8001326 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130c:	4b93      	ldr	r3, [pc, #588]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b08      	cmp	r3, #8
 8001316:	d112      	bne.n	800133e <HAL_RCC_OscConfig+0x62>
 8001318:	4b90      	ldr	r3, [pc, #576]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001320:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001324:	d10b      	bne.n	800133e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001326:	4b8d      	ldr	r3, [pc, #564]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d06c      	beq.n	800140c <HAL_RCC_OscConfig+0x130>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d168      	bne.n	800140c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e275      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001346:	d106      	bne.n	8001356 <HAL_RCC_OscConfig+0x7a>
 8001348:	4b84      	ldr	r3, [pc, #528]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a83      	ldr	r2, [pc, #524]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800134e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	e02e      	b.n	80013b4 <HAL_RCC_OscConfig+0xd8>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x9c>
 800135e:	4b7f      	ldr	r3, [pc, #508]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a7e      	ldr	r2, [pc, #504]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	4b7c      	ldr	r3, [pc, #496]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a7b      	ldr	r2, [pc, #492]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001370:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e01d      	b.n	80013b4 <HAL_RCC_OscConfig+0xd8>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0xc0>
 8001382:	4b76      	ldr	r3, [pc, #472]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a75      	ldr	r2, [pc, #468]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001388:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b73      	ldr	r3, [pc, #460]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a72      	ldr	r2, [pc, #456]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0xd8>
 800139c:	4b6f      	ldr	r3, [pc, #444]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a6e      	ldr	r2, [pc, #440]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 80013a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b6c      	ldr	r3, [pc, #432]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a6b      	ldr	r2, [pc, #428]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 80013ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d013      	beq.n	80013e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013bc:	f7ff fc36 	bl	8000c2c <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fc32 	bl	8000c2c <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	@ 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e229      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	4b61      	ldr	r3, [pc, #388]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0xe8>
 80013e2:	e014      	b.n	800140e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e4:	f7ff fc22 	bl	8000c2c <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ec:	f7ff fc1e 	bl	8000c2c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	@ 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e215      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	4b57      	ldr	r3, [pc, #348]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x110>
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d069      	beq.n	80014ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800141a:	4b50      	ldr	r3, [pc, #320]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00b      	beq.n	800143e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001426:	4b4d      	ldr	r3, [pc, #308]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b08      	cmp	r3, #8
 8001430:	d11c      	bne.n	800146c <HAL_RCC_OscConfig+0x190>
 8001432:	4b4a      	ldr	r3, [pc, #296]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d116      	bne.n	800146c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143e:	4b47      	ldr	r3, [pc, #284]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d005      	beq.n	8001456 <HAL_RCC_OscConfig+0x17a>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d001      	beq.n	8001456 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e1e9      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001456:	4b41      	ldr	r3, [pc, #260]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	493d      	ldr	r1, [pc, #244]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	e040      	b.n	80014ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d023      	beq.n	80014bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001474:	4b39      	ldr	r3, [pc, #228]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a38      	ldr	r2, [pc, #224]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fbd4 	bl	8000c2c <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001488:	f7ff fbd0 	bl	8000c2c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e1c7      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149a:	4b30      	ldr	r3, [pc, #192]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a6:	4b2d      	ldr	r3, [pc, #180]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4929      	ldr	r1, [pc, #164]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]
 80014ba:	e018      	b.n	80014ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014bc:	4b27      	ldr	r3, [pc, #156]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a26      	ldr	r2, [pc, #152]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 80014c2:	f023 0301 	bic.w	r3, r3, #1
 80014c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fbb0 	bl	8000c2c <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d0:	f7ff fbac 	bl	8000c2c <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e1a3      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e2:	4b1e      	ldr	r3, [pc, #120]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d038      	beq.n	800156c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d019      	beq.n	8001536 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001502:	4b16      	ldr	r3, [pc, #88]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150e:	f7ff fb8d 	bl	8000c2c <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001516:	f7ff fb89 	bl	8000c2c <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e180      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001528:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800152a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x23a>
 8001534:	e01a      	b.n	800156c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001536:	4b09      	ldr	r3, [pc, #36]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800153a:	4a08      	ldr	r2, [pc, #32]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800153c:	f023 0301 	bic.w	r3, r3, #1
 8001540:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001542:	f7ff fb73 	bl	8000c2c <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001548:	e00a      	b.n	8001560 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800154a:	f7ff fb6f 	bl	8000c2c <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d903      	bls.n	8001560 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e166      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
 800155c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001560:	4b92      	ldr	r3, [pc, #584]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1ee      	bne.n	800154a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80a4 	beq.w	80016c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800157a:	4b8c      	ldr	r3, [pc, #560]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10d      	bne.n	80015a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	4b89      	ldr	r3, [pc, #548]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	4a88      	ldr	r2, [pc, #544]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001590:	6413      	str	r3, [r2, #64]	@ 0x40
 8001592:	4b86      	ldr	r3, [pc, #536]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800159e:	2301      	movs	r3, #1
 80015a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015a2:	4b83      	ldr	r3, [pc, #524]	@ (80017b0 <HAL_RCC_OscConfig+0x4d4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d118      	bne.n	80015e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80015ae:	4b80      	ldr	r3, [pc, #512]	@ (80017b0 <HAL_RCC_OscConfig+0x4d4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a7f      	ldr	r2, [pc, #508]	@ (80017b0 <HAL_RCC_OscConfig+0x4d4>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ba:	f7ff fb37 	bl	8000c2c <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c2:	f7ff fb33 	bl	8000c2c <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b64      	cmp	r3, #100	@ 0x64
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e12a      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d4:	4b76      	ldr	r3, [pc, #472]	@ (80017b0 <HAL_RCC_OscConfig+0x4d4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d106      	bne.n	80015f6 <HAL_RCC_OscConfig+0x31a>
 80015e8:	4b70      	ldr	r3, [pc, #448]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ec:	4a6f      	ldr	r2, [pc, #444]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015f4:	e02d      	b.n	8001652 <HAL_RCC_OscConfig+0x376>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10c      	bne.n	8001618 <HAL_RCC_OscConfig+0x33c>
 80015fe:	4b6b      	ldr	r3, [pc, #428]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001602:	4a6a      	ldr	r2, [pc, #424]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	6713      	str	r3, [r2, #112]	@ 0x70
 800160a:	4b68      	ldr	r3, [pc, #416]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800160e:	4a67      	ldr	r2, [pc, #412]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001610:	f023 0304 	bic.w	r3, r3, #4
 8001614:	6713      	str	r3, [r2, #112]	@ 0x70
 8001616:	e01c      	b.n	8001652 <HAL_RCC_OscConfig+0x376>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b05      	cmp	r3, #5
 800161e:	d10c      	bne.n	800163a <HAL_RCC_OscConfig+0x35e>
 8001620:	4b62      	ldr	r3, [pc, #392]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001624:	4a61      	ldr	r2, [pc, #388]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6713      	str	r3, [r2, #112]	@ 0x70
 800162c:	4b5f      	ldr	r3, [pc, #380]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001630:	4a5e      	ldr	r2, [pc, #376]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6713      	str	r3, [r2, #112]	@ 0x70
 8001638:	e00b      	b.n	8001652 <HAL_RCC_OscConfig+0x376>
 800163a:	4b5c      	ldr	r3, [pc, #368]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800163e:	4a5b      	ldr	r2, [pc, #364]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6713      	str	r3, [r2, #112]	@ 0x70
 8001646:	4b59      	ldr	r3, [pc, #356]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800164a:	4a58      	ldr	r2, [pc, #352]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800164c:	f023 0304 	bic.w	r3, r3, #4
 8001650:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d015      	beq.n	8001686 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165a:	f7ff fae7 	bl	8000c2c <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001660:	e00a      	b.n	8001678 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001662:	f7ff fae3 	bl	8000c2c <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001670:	4293      	cmp	r3, r2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e0d8      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001678:	4b4c      	ldr	r3, [pc, #304]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0ee      	beq.n	8001662 <HAL_RCC_OscConfig+0x386>
 8001684:	e014      	b.n	80016b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001686:	f7ff fad1 	bl	8000c2c <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168c:	e00a      	b.n	80016a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168e:	f7ff facd 	bl	8000c2c <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169c:	4293      	cmp	r3, r2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e0c2      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a4:	4b41      	ldr	r3, [pc, #260]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 80016a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1ee      	bne.n	800168e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d105      	bne.n	80016c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b6:	4b3d      	ldr	r3, [pc, #244]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	4a3c      	ldr	r2, [pc, #240]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 80016bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016c0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 80ae 	beq.w	8001828 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016cc:	4b37      	ldr	r3, [pc, #220]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d06d      	beq.n	80017b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d14b      	bne.n	8001778 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e0:	4b32      	ldr	r3, [pc, #200]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a31      	ldr	r2, [pc, #196]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 80016e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff fa9e 	bl	8000c2c <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff fa9a 	bl	8000c2c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e091      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001706:	4b29      	ldr	r3, [pc, #164]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69da      	ldr	r2, [r3, #28]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001720:	019b      	lsls	r3, r3, #6
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001728:	085b      	lsrs	r3, r3, #1
 800172a:	3b01      	subs	r3, #1
 800172c:	041b      	lsls	r3, r3, #16
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001734:	061b      	lsls	r3, r3, #24
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173c:	071b      	lsls	r3, r3, #28
 800173e:	491b      	ldr	r1, [pc, #108]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001744:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a18      	ldr	r2, [pc, #96]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800174a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800174e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fa6c 	bl	8000c2c <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001758:	f7ff fa68 	bl	8000c2c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e05f      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x47c>
 8001776:	e057      	b.n	8001828 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0b      	ldr	r2, [pc, #44]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800177e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff fa52 	bl	8000c2c <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff fa4e 	bl	8000c2c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e045      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179e:	4b03      	ldr	r3, [pc, #12]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x4b0>
 80017aa:	e03d      	b.n	8001828 <HAL_RCC_OscConfig+0x54c>
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80017b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001834 <HAL_RCC_OscConfig+0x558>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d030      	beq.n	8001824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d129      	bne.n	8001824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d122      	bne.n	8001824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80017e4:	4013      	ands	r3, r2
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d119      	bne.n	8001824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fa:	085b      	lsrs	r3, r3, #1
 80017fc:	3b01      	subs	r3, #1
 80017fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d10f      	bne.n	8001824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d107      	bne.n	8001824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0d0      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001850:	4b6a      	ldr	r3, [pc, #424]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 030f 	and.w	r3, r3, #15
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d910      	bls.n	8001880 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b67      	ldr	r3, [pc, #412]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 020f 	bic.w	r2, r3, #15
 8001866:	4965      	ldr	r1, [pc, #404]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186e:	4b63      	ldr	r3, [pc, #396]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0b8      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d020      	beq.n	80018ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001898:	4b59      	ldr	r3, [pc, #356]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	4a58      	ldr	r2, [pc, #352]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 800189e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b0:	4b53      	ldr	r3, [pc, #332]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	4a52      	ldr	r2, [pc, #328]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80018b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018bc:	4b50      	ldr	r3, [pc, #320]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	494d      	ldr	r1, [pc, #308]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d040      	beq.n	800195c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	4b47      	ldr	r3, [pc, #284]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d115      	bne.n	800191a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e07f      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fa:	4b41      	ldr	r3, [pc, #260]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e073      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e06b      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800191a:	4b39      	ldr	r3, [pc, #228]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f023 0203 	bic.w	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4936      	ldr	r1, [pc, #216]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 8001928:	4313      	orrs	r3, r2
 800192a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800192c:	f7ff f97e 	bl	8000c2c <HAL_GetTick>
 8001930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	e00a      	b.n	800194a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001934:	f7ff f97a 	bl	8000c2c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e053      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 020c 	and.w	r2, r3, #12
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	429a      	cmp	r2, r3
 800195a:	d1eb      	bne.n	8001934 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800195c:	4b27      	ldr	r3, [pc, #156]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d210      	bcs.n	800198c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b24      	ldr	r3, [pc, #144]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 020f 	bic.w	r2, r3, #15
 8001972:	4922      	ldr	r1, [pc, #136]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b20      	ldr	r3, [pc, #128]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e032      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001998:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4916      	ldr	r1, [pc, #88]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019b6:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	490e      	ldr	r1, [pc, #56]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ca:	f000 f821 	bl	8001a10 <HAL_RCC_GetSysClockFreq>
 80019ce:	4602      	mov	r2, r0
 80019d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	490a      	ldr	r1, [pc, #40]	@ (8001a04 <HAL_RCC_ClockConfig+0x1cc>)
 80019dc:	5ccb      	ldrb	r3, [r1, r3]
 80019de:	fa22 f303 	lsr.w	r3, r2, r3
 80019e2:	4a09      	ldr	r2, [pc, #36]	@ (8001a08 <HAL_RCC_ClockConfig+0x1d0>)
 80019e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <HAL_RCC_ClockConfig+0x1d4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f8da 	bl	8000ba4 <HAL_InitTick>

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023c00 	.word	0x40023c00
 8001a00:	40023800 	.word	0x40023800
 8001a04:	08003d98 	.word	0x08003d98
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a14:	b090      	sub	sp, #64	@ 0x40
 8001a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a20:	2300      	movs	r3, #0
 8001a22:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a28:	4b59      	ldr	r3, [pc, #356]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d00d      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x40>
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	f200 80a1 	bhi.w	8001b7c <HAL_RCC_GetSysClockFreq+0x16c>
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <HAL_RCC_GetSysClockFreq+0x34>
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d003      	beq.n	8001a4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a42:	e09b      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a44:	4b53      	ldr	r3, [pc, #332]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a48:	e09b      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a4a:	4b53      	ldr	r3, [pc, #332]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a4e:	e098      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a50:	4b4f      	ldr	r3, [pc, #316]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a58:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a5a:	4b4d      	ldr	r3, [pc, #308]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d028      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a66:	4b4a      	ldr	r3, [pc, #296]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	099b      	lsrs	r3, r3, #6
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	623b      	str	r3, [r7, #32]
 8001a70:	627a      	str	r2, [r7, #36]	@ 0x24
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4b47      	ldr	r3, [pc, #284]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a7c:	fb03 f201 	mul.w	r2, r3, r1
 8001a80:	2300      	movs	r3, #0
 8001a82:	fb00 f303 	mul.w	r3, r0, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	4a43      	ldr	r2, [pc, #268]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a8a:	fba0 1202 	umull	r1, r2, r0, r2
 8001a8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a90:	460a      	mov	r2, r1
 8001a92:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001a94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a96:	4413      	add	r3, r2
 8001a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	61bb      	str	r3, [r7, #24]
 8001aa0:	61fa      	str	r2, [r7, #28]
 8001aa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aa6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001aaa:	f7fe fc19 	bl	80002e0 <__aeabi_uldivmod>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ab6:	e053      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ab8:	4b35      	ldr	r3, [pc, #212]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	099b      	lsrs	r3, r3, #6
 8001abe:	2200      	movs	r2, #0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	617a      	str	r2, [r7, #20]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001aca:	f04f 0b00 	mov.w	fp, #0
 8001ace:	4652      	mov	r2, sl
 8001ad0:	465b      	mov	r3, fp
 8001ad2:	f04f 0000 	mov.w	r0, #0
 8001ad6:	f04f 0100 	mov.w	r1, #0
 8001ada:	0159      	lsls	r1, r3, #5
 8001adc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ae0:	0150      	lsls	r0, r2, #5
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	ebb2 080a 	subs.w	r8, r2, sl
 8001aea:	eb63 090b 	sbc.w	r9, r3, fp
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001afa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001afe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b02:	ebb2 0408 	subs.w	r4, r2, r8
 8001b06:	eb63 0509 	sbc.w	r5, r3, r9
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	00eb      	lsls	r3, r5, #3
 8001b14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b18:	00e2      	lsls	r2, r4, #3
 8001b1a:	4614      	mov	r4, r2
 8001b1c:	461d      	mov	r5, r3
 8001b1e:	eb14 030a 	adds.w	r3, r4, sl
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	eb45 030b 	adc.w	r3, r5, fp
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b36:	4629      	mov	r1, r5
 8001b38:	028b      	lsls	r3, r1, #10
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b40:	4621      	mov	r1, r4
 8001b42:	028a      	lsls	r2, r1, #10
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	60fa      	str	r2, [r7, #12]
 8001b50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b54:	f7fe fbc4 	bl	80002e0 <__aeabi_uldivmod>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b60:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	0c1b      	lsrs	r3, r3, #16
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001b70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b7a:	e002      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3740      	adds	r7, #64	@ 0x40
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	00f42400 	.word	0x00f42400
 8001b98:	017d7840 	.word	0x017d7840

08001b9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba0:	4b03      	ldr	r3, [pc, #12]	@ (8001bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20000000 	.word	0x20000000

08001bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bb8:	f7ff fff0 	bl	8001b9c <HAL_RCC_GetHCLKFreq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	0a9b      	lsrs	r3, r3, #10
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	4903      	ldr	r1, [pc, #12]	@ (8001bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bca:	5ccb      	ldrb	r3, [r1, r3]
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	08003da8 	.word	0x08003da8

08001bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001be0:	f7ff ffdc 	bl	8001b9c <HAL_RCC_GetHCLKFreq>
 8001be4:	4602      	mov	r2, r0
 8001be6:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	0b5b      	lsrs	r3, r3, #13
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	4903      	ldr	r1, [pc, #12]	@ (8001c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bf2:	5ccb      	ldrb	r3, [r1, r3]
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	08003da8 	.word	0x08003da8

08001c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d012      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c2c:	4b69      	ldr	r3, [pc, #420]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4a68      	ldr	r2, [pc, #416]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c32:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001c36:	6093      	str	r3, [r2, #8]
 8001c38:	4b66      	ldr	r3, [pc, #408]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c40:	4964      	ldr	r1, [pc, #400]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d017      	beq.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c64:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c6c:	4959      	ldr	r1, [pc, #356]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d017      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ca0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca8:	494a      	ldr	r1, [pc, #296]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 808b 	beq.w	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	4b3a      	ldr	r3, [pc, #232]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	4a39      	ldr	r2, [pc, #228]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf4:	4b37      	ldr	r3, [pc, #220]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d00:	4b35      	ldr	r3, [pc, #212]	@ (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a34      	ldr	r2, [pc, #208]	@ (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d0c:	f7fe ff8e 	bl	8000c2c <HAL_GetTick>
 8001d10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d14:	f7fe ff8a 	bl	8000c2c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	@ 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e38f      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d26:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d32:	4b28      	ldr	r3, [pc, #160]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d035      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d02e      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d50:	4b20      	ldr	r3, [pc, #128]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d64:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d66:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d70:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001d72:	4a18      	ldr	r2, [pc, #96]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d78:	4b16      	ldr	r3, [pc, #88]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d114      	bne.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7fe ff52 	bl	8000c2c <HAL_GetTick>
 8001d88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8c:	f7fe ff4e 	bl	8000c2c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e351      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da2:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0ee      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001db6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001dba:	d111      	bne.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001dbc:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001dc8:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001dca:	400b      	ands	r3, r1
 8001dcc:	4901      	ldr	r1, [pc, #4]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	608b      	str	r3, [r1, #8]
 8001dd2:	e00b      	b.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40007000 	.word	0x40007000
 8001ddc:	0ffffcff 	.word	0x0ffffcff
 8001de0:	4bac      	ldr	r3, [pc, #688]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4aab      	ldr	r2, [pc, #684]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001de6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001dea:	6093      	str	r3, [r2, #8]
 8001dec:	4ba9      	ldr	r3, [pc, #676]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df8:	49a6      	ldr	r1, [pc, #664]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d010      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e0a:	4ba2      	ldr	r3, [pc, #648]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e10:	4aa0      	ldr	r2, [pc, #640]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e1a:	4b9e      	ldr	r3, [pc, #632]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e24:	499b      	ldr	r1, [pc, #620]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00a      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e38:	4b96      	ldr	r3, [pc, #600]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e46:	4993      	ldr	r1, [pc, #588]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e5a:	4b8e      	ldr	r3, [pc, #568]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e68:	498a      	ldr	r1, [pc, #552]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e7c:	4b85      	ldr	r3, [pc, #532]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e8a:	4982      	ldr	r1, [pc, #520]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e9e:	4b7d      	ldr	r3, [pc, #500]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eac:	4979      	ldr	r1, [pc, #484]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ec0:	4b74      	ldr	r3, [pc, #464]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec6:	f023 0203 	bic.w	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ece:	4971      	ldr	r1, [pc, #452]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ee2:	4b6c      	ldr	r3, [pc, #432]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee8:	f023 020c 	bic.w	r2, r3, #12
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef0:	4968      	ldr	r1, [pc, #416]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00a      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f04:	4b63      	ldr	r3, [pc, #396]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f12:	4960      	ldr	r1, [pc, #384]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f26:	4b5b      	ldr	r3, [pc, #364]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f34:	4957      	ldr	r1, [pc, #348]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f48:	4b52      	ldr	r3, [pc, #328]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f56:	494f      	ldr	r1, [pc, #316]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001f6a:	4b4a      	ldr	r3, [pc, #296]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f70:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f78:	4946      	ldr	r1, [pc, #280]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f8c:	4b41      	ldr	r3, [pc, #260]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f92:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9a:	493e      	ldr	r1, [pc, #248]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00a      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001fae:	4b39      	ldr	r3, [pc, #228]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fbc:	4935      	ldr	r1, [pc, #212]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00a      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fd0:	4b30      	ldr	r3, [pc, #192]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001fde:	492d      	ldr	r1, [pc, #180]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d011      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ff2:	4b28      	ldr	r3, [pc, #160]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002000:	4924      	ldr	r1, [pc, #144]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800200c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002010:	d101      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002012:	2301      	movs	r3, #1
 8002014:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002022:	2301      	movs	r3, #1
 8002024:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002032:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002038:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002040:	4914      	ldr	r1, [pc, #80]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00b      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002054:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002064:	490b      	ldr	r1, [pc, #44]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002066:	4313      	orrs	r3, r2
 8002068:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00f      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002078:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002088:	4902      	ldr	r1, [pc, #8]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002090:	e002      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00b      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80020a4:	4b8a      	ldr	r3, [pc, #552]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020aa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b4:	4986      	ldr	r1, [pc, #536]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00b      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80020c8:	4b81      	ldr	r3, [pc, #516]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020ce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020d8:	497d      	ldr	r1, [pc, #500]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d006      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 80d6 	beq.w	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020f4:	4b76      	ldr	r3, [pc, #472]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a75      	ldr	r2, [pc, #468]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80020fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002100:	f7fe fd94 	bl	8000c2c <HAL_GetTick>
 8002104:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002108:	f7fe fd90 	bl	8000c2c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	@ 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e195      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d021      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002136:	2b00      	cmp	r3, #0
 8002138:	d11d      	bne.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800213a:	4b65      	ldr	r3, [pc, #404]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800213c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002140:	0c1b      	lsrs	r3, r3, #16
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002148:	4b61      	ldr	r3, [pc, #388]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800214a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800214e:	0e1b      	lsrs	r3, r3, #24
 8002150:	f003 030f 	and.w	r3, r3, #15
 8002154:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	019a      	lsls	r2, r3, #6
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	041b      	lsls	r3, r3, #16
 8002160:	431a      	orrs	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	061b      	lsls	r3, r3, #24
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	071b      	lsls	r3, r3, #28
 800216e:	4958      	ldr	r1, [pc, #352]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d004      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002194:	2b00      	cmp	r3, #0
 8002196:	d02e      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021a0:	d129      	bne.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021a2:	4b4b      	ldr	r3, [pc, #300]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021a8:	0c1b      	lsrs	r3, r3, #16
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021b0:	4b47      	ldr	r3, [pc, #284]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021b6:	0f1b      	lsrs	r3, r3, #28
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	019a      	lsls	r2, r3, #6
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	041b      	lsls	r3, r3, #16
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	061b      	lsls	r3, r3, #24
 80021d0:	431a      	orrs	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	071b      	lsls	r3, r3, #28
 80021d6:	493e      	ldr	r1, [pc, #248]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80021de:	4b3c      	ldr	r3, [pc, #240]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021e4:	f023 021f 	bic.w	r2, r3, #31
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	3b01      	subs	r3, #1
 80021ee:	4938      	ldr	r1, [pc, #224]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01d      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002202:	4b33      	ldr	r3, [pc, #204]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002204:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002208:	0e1b      	lsrs	r3, r3, #24
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002210:	4b2f      	ldr	r3, [pc, #188]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002216:	0f1b      	lsrs	r3, r3, #28
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	019a      	lsls	r2, r3, #6
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	041b      	lsls	r3, r3, #16
 800222a:	431a      	orrs	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	061b      	lsls	r3, r3, #24
 8002230:	431a      	orrs	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	071b      	lsls	r3, r3, #28
 8002236:	4926      	ldr	r1, [pc, #152]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d011      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	019a      	lsls	r2, r3, #6
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	041b      	lsls	r3, r3, #16
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	061b      	lsls	r3, r3, #24
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	071b      	lsls	r3, r3, #28
 8002266:	491a      	ldr	r1, [pc, #104]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800226e:	4b18      	ldr	r3, [pc, #96]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a17      	ldr	r2, [pc, #92]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002274:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800227a:	f7fe fcd7 	bl	8000c2c <HAL_GetTick>
 800227e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002282:	f7fe fcd3 	bl	8000c2c <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b64      	cmp	r3, #100	@ 0x64
 800228e:	d901      	bls.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e0d8      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002294:	4b0e      	ldr	r3, [pc, #56]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	f040 80ce 	bne.w	8002444 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80022a8:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a08      	ldr	r2, [pc, #32]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022b4:	f7fe fcba 	bl	8000c2c <HAL_GetTick>
 80022b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022ba:	e00b      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80022bc:	f7fe fcb6 	bl	8000c2c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b64      	cmp	r3, #100	@ 0x64
 80022c8:	d904      	bls.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e0bb      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022e0:	d0ec      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d009      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d02e      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	2b00      	cmp	r3, #0
 8002308:	d12a      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800230a:	4b51      	ldr	r3, [pc, #324]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002318:	4b4d      	ldr	r3, [pc, #308]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231e:	0f1b      	lsrs	r3, r3, #28
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	019a      	lsls	r2, r3, #6
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	041b      	lsls	r3, r3, #16
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	061b      	lsls	r3, r3, #24
 8002338:	431a      	orrs	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	071b      	lsls	r3, r3, #28
 800233e:	4944      	ldr	r1, [pc, #272]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002346:	4b42      	ldr	r3, [pc, #264]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800234c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002354:	3b01      	subs	r3, #1
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	493d      	ldr	r1, [pc, #244]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d022      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002370:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002374:	d11d      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002376:	4b36      	ldr	r3, [pc, #216]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237c:	0e1b      	lsrs	r3, r3, #24
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002384:	4b32      	ldr	r3, [pc, #200]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800238a:	0f1b      	lsrs	r3, r3, #28
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	019a      	lsls	r2, r3, #6
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	041b      	lsls	r3, r3, #16
 800239e:	431a      	orrs	r2, r3
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	061b      	lsls	r3, r3, #24
 80023a4:	431a      	orrs	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	071b      	lsls	r3, r3, #28
 80023aa:	4929      	ldr	r1, [pc, #164]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d028      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023be:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c4:	0e1b      	lsrs	r3, r3, #24
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023cc:	4b20      	ldr	r3, [pc, #128]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d2:	0c1b      	lsrs	r3, r3, #16
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	019a      	lsls	r2, r3, #6
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	041b      	lsls	r3, r3, #16
 80023e4:	431a      	orrs	r2, r3
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	061b      	lsls	r3, r3, #24
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	071b      	lsls	r3, r3, #28
 80023f2:	4917      	ldr	r1, [pc, #92]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80023fa:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002400:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002408:	4911      	ldr	r1, [pc, #68]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002410:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a0e      	ldr	r2, [pc, #56]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800241a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800241c:	f7fe fc06 	bl	8000c2c <HAL_GetTick>
 8002420:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002424:	f7fe fc02 	bl	8000c2c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	@ 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e007      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002436:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800243e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002442:	d1ef      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3720      	adds	r7, #32
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800

08002454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e040      	b.n	80024e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe fa1a 	bl	80008b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2224      	movs	r2, #36	@ 0x24
 8002480:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0201 	bic.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f8b0 	bl	80025f8 <UART_SetConfig>
 8002498:	4603      	mov	r3, r0
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e022      	b.n	80024e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fb08 	bl	8002ac0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fb8f 	bl	8002c04 <UART_CheckIdleState>
 80024e6:	4603      	mov	r3, r0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	@ 0x28
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002504:	2b20      	cmp	r3, #32
 8002506:	d171      	bne.n	80025ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <HAL_UART_Transmit+0x24>
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e06a      	b.n	80025ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2221      	movs	r2, #33	@ 0x21
 8002524:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002526:	f7fe fb81 	bl	8000c2c <HAL_GetTick>
 800252a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	88fa      	ldrh	r2, [r7, #6]
 8002530:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	88fa      	ldrh	r2, [r7, #6]
 8002538:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002544:	d108      	bne.n	8002558 <HAL_UART_Transmit+0x68>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d104      	bne.n	8002558 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	e003      	b.n	8002560 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800255c:	2300      	movs	r3, #0
 800255e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002560:	e02c      	b.n	80025bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2200      	movs	r2, #0
 800256a:	2180      	movs	r1, #128	@ 0x80
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 fb96 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e038      	b.n	80025ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10b      	bne.n	800259a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002590:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	3302      	adds	r3, #2
 8002596:	61bb      	str	r3, [r7, #24]
 8002598:	e007      	b.n	80025aa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	781a      	ldrb	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	3301      	adds	r3, #1
 80025a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1cc      	bne.n	8002562 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2200      	movs	r2, #0
 80025d0:	2140      	movs	r1, #64	@ 0x40
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 fb63 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e005      	b.n	80025ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2220      	movs	r2, #32
 80025e6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e000      	b.n	80025ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80025ec:	2302      	movs	r3, #2
  }
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3720      	adds	r7, #32
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4ba6      	ldr	r3, [pc, #664]	@ (80028bc <UART_SetConfig+0x2c4>)
 8002624:	4013      	ands	r3, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	6979      	ldr	r1, [r7, #20]
 800262c:	430b      	orrs	r3, r1
 800262e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	430a      	orrs	r2, r1
 8002668:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a94      	ldr	r2, [pc, #592]	@ (80028c0 <UART_SetConfig+0x2c8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d120      	bne.n	80026b6 <UART_SetConfig+0xbe>
 8002674:	4b93      	ldr	r3, [pc, #588]	@ (80028c4 <UART_SetConfig+0x2cc>)
 8002676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b03      	cmp	r3, #3
 8002680:	d816      	bhi.n	80026b0 <UART_SetConfig+0xb8>
 8002682:	a201      	add	r2, pc, #4	@ (adr r2, 8002688 <UART_SetConfig+0x90>)
 8002684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002688:	08002699 	.word	0x08002699
 800268c:	080026a5 	.word	0x080026a5
 8002690:	0800269f 	.word	0x0800269f
 8002694:	080026ab 	.word	0x080026ab
 8002698:	2301      	movs	r3, #1
 800269a:	77fb      	strb	r3, [r7, #31]
 800269c:	e150      	b.n	8002940 <UART_SetConfig+0x348>
 800269e:	2302      	movs	r3, #2
 80026a0:	77fb      	strb	r3, [r7, #31]
 80026a2:	e14d      	b.n	8002940 <UART_SetConfig+0x348>
 80026a4:	2304      	movs	r3, #4
 80026a6:	77fb      	strb	r3, [r7, #31]
 80026a8:	e14a      	b.n	8002940 <UART_SetConfig+0x348>
 80026aa:	2308      	movs	r3, #8
 80026ac:	77fb      	strb	r3, [r7, #31]
 80026ae:	e147      	b.n	8002940 <UART_SetConfig+0x348>
 80026b0:	2310      	movs	r3, #16
 80026b2:	77fb      	strb	r3, [r7, #31]
 80026b4:	e144      	b.n	8002940 <UART_SetConfig+0x348>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a83      	ldr	r2, [pc, #524]	@ (80028c8 <UART_SetConfig+0x2d0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d132      	bne.n	8002726 <UART_SetConfig+0x12e>
 80026c0:	4b80      	ldr	r3, [pc, #512]	@ (80028c4 <UART_SetConfig+0x2cc>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b0c      	cmp	r3, #12
 80026cc:	d828      	bhi.n	8002720 <UART_SetConfig+0x128>
 80026ce:	a201      	add	r2, pc, #4	@ (adr r2, 80026d4 <UART_SetConfig+0xdc>)
 80026d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d4:	08002709 	.word	0x08002709
 80026d8:	08002721 	.word	0x08002721
 80026dc:	08002721 	.word	0x08002721
 80026e0:	08002721 	.word	0x08002721
 80026e4:	08002715 	.word	0x08002715
 80026e8:	08002721 	.word	0x08002721
 80026ec:	08002721 	.word	0x08002721
 80026f0:	08002721 	.word	0x08002721
 80026f4:	0800270f 	.word	0x0800270f
 80026f8:	08002721 	.word	0x08002721
 80026fc:	08002721 	.word	0x08002721
 8002700:	08002721 	.word	0x08002721
 8002704:	0800271b 	.word	0x0800271b
 8002708:	2300      	movs	r3, #0
 800270a:	77fb      	strb	r3, [r7, #31]
 800270c:	e118      	b.n	8002940 <UART_SetConfig+0x348>
 800270e:	2302      	movs	r3, #2
 8002710:	77fb      	strb	r3, [r7, #31]
 8002712:	e115      	b.n	8002940 <UART_SetConfig+0x348>
 8002714:	2304      	movs	r3, #4
 8002716:	77fb      	strb	r3, [r7, #31]
 8002718:	e112      	b.n	8002940 <UART_SetConfig+0x348>
 800271a:	2308      	movs	r3, #8
 800271c:	77fb      	strb	r3, [r7, #31]
 800271e:	e10f      	b.n	8002940 <UART_SetConfig+0x348>
 8002720:	2310      	movs	r3, #16
 8002722:	77fb      	strb	r3, [r7, #31]
 8002724:	e10c      	b.n	8002940 <UART_SetConfig+0x348>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a68      	ldr	r2, [pc, #416]	@ (80028cc <UART_SetConfig+0x2d4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d120      	bne.n	8002772 <UART_SetConfig+0x17a>
 8002730:	4b64      	ldr	r3, [pc, #400]	@ (80028c4 <UART_SetConfig+0x2cc>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002736:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800273a:	2b30      	cmp	r3, #48	@ 0x30
 800273c:	d013      	beq.n	8002766 <UART_SetConfig+0x16e>
 800273e:	2b30      	cmp	r3, #48	@ 0x30
 8002740:	d814      	bhi.n	800276c <UART_SetConfig+0x174>
 8002742:	2b20      	cmp	r3, #32
 8002744:	d009      	beq.n	800275a <UART_SetConfig+0x162>
 8002746:	2b20      	cmp	r3, #32
 8002748:	d810      	bhi.n	800276c <UART_SetConfig+0x174>
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <UART_SetConfig+0x15c>
 800274e:	2b10      	cmp	r3, #16
 8002750:	d006      	beq.n	8002760 <UART_SetConfig+0x168>
 8002752:	e00b      	b.n	800276c <UART_SetConfig+0x174>
 8002754:	2300      	movs	r3, #0
 8002756:	77fb      	strb	r3, [r7, #31]
 8002758:	e0f2      	b.n	8002940 <UART_SetConfig+0x348>
 800275a:	2302      	movs	r3, #2
 800275c:	77fb      	strb	r3, [r7, #31]
 800275e:	e0ef      	b.n	8002940 <UART_SetConfig+0x348>
 8002760:	2304      	movs	r3, #4
 8002762:	77fb      	strb	r3, [r7, #31]
 8002764:	e0ec      	b.n	8002940 <UART_SetConfig+0x348>
 8002766:	2308      	movs	r3, #8
 8002768:	77fb      	strb	r3, [r7, #31]
 800276a:	e0e9      	b.n	8002940 <UART_SetConfig+0x348>
 800276c:	2310      	movs	r3, #16
 800276e:	77fb      	strb	r3, [r7, #31]
 8002770:	e0e6      	b.n	8002940 <UART_SetConfig+0x348>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a56      	ldr	r2, [pc, #344]	@ (80028d0 <UART_SetConfig+0x2d8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d120      	bne.n	80027be <UART_SetConfig+0x1c6>
 800277c:	4b51      	ldr	r3, [pc, #324]	@ (80028c4 <UART_SetConfig+0x2cc>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002782:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002786:	2bc0      	cmp	r3, #192	@ 0xc0
 8002788:	d013      	beq.n	80027b2 <UART_SetConfig+0x1ba>
 800278a:	2bc0      	cmp	r3, #192	@ 0xc0
 800278c:	d814      	bhi.n	80027b8 <UART_SetConfig+0x1c0>
 800278e:	2b80      	cmp	r3, #128	@ 0x80
 8002790:	d009      	beq.n	80027a6 <UART_SetConfig+0x1ae>
 8002792:	2b80      	cmp	r3, #128	@ 0x80
 8002794:	d810      	bhi.n	80027b8 <UART_SetConfig+0x1c0>
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <UART_SetConfig+0x1a8>
 800279a:	2b40      	cmp	r3, #64	@ 0x40
 800279c:	d006      	beq.n	80027ac <UART_SetConfig+0x1b4>
 800279e:	e00b      	b.n	80027b8 <UART_SetConfig+0x1c0>
 80027a0:	2300      	movs	r3, #0
 80027a2:	77fb      	strb	r3, [r7, #31]
 80027a4:	e0cc      	b.n	8002940 <UART_SetConfig+0x348>
 80027a6:	2302      	movs	r3, #2
 80027a8:	77fb      	strb	r3, [r7, #31]
 80027aa:	e0c9      	b.n	8002940 <UART_SetConfig+0x348>
 80027ac:	2304      	movs	r3, #4
 80027ae:	77fb      	strb	r3, [r7, #31]
 80027b0:	e0c6      	b.n	8002940 <UART_SetConfig+0x348>
 80027b2:	2308      	movs	r3, #8
 80027b4:	77fb      	strb	r3, [r7, #31]
 80027b6:	e0c3      	b.n	8002940 <UART_SetConfig+0x348>
 80027b8:	2310      	movs	r3, #16
 80027ba:	77fb      	strb	r3, [r7, #31]
 80027bc:	e0c0      	b.n	8002940 <UART_SetConfig+0x348>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a44      	ldr	r2, [pc, #272]	@ (80028d4 <UART_SetConfig+0x2dc>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d125      	bne.n	8002814 <UART_SetConfig+0x21c>
 80027c8:	4b3e      	ldr	r3, [pc, #248]	@ (80028c4 <UART_SetConfig+0x2cc>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027d6:	d017      	beq.n	8002808 <UART_SetConfig+0x210>
 80027d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027dc:	d817      	bhi.n	800280e <UART_SetConfig+0x216>
 80027de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027e2:	d00b      	beq.n	80027fc <UART_SetConfig+0x204>
 80027e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027e8:	d811      	bhi.n	800280e <UART_SetConfig+0x216>
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <UART_SetConfig+0x1fe>
 80027ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027f2:	d006      	beq.n	8002802 <UART_SetConfig+0x20a>
 80027f4:	e00b      	b.n	800280e <UART_SetConfig+0x216>
 80027f6:	2300      	movs	r3, #0
 80027f8:	77fb      	strb	r3, [r7, #31]
 80027fa:	e0a1      	b.n	8002940 <UART_SetConfig+0x348>
 80027fc:	2302      	movs	r3, #2
 80027fe:	77fb      	strb	r3, [r7, #31]
 8002800:	e09e      	b.n	8002940 <UART_SetConfig+0x348>
 8002802:	2304      	movs	r3, #4
 8002804:	77fb      	strb	r3, [r7, #31]
 8002806:	e09b      	b.n	8002940 <UART_SetConfig+0x348>
 8002808:	2308      	movs	r3, #8
 800280a:	77fb      	strb	r3, [r7, #31]
 800280c:	e098      	b.n	8002940 <UART_SetConfig+0x348>
 800280e:	2310      	movs	r3, #16
 8002810:	77fb      	strb	r3, [r7, #31]
 8002812:	e095      	b.n	8002940 <UART_SetConfig+0x348>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a2f      	ldr	r2, [pc, #188]	@ (80028d8 <UART_SetConfig+0x2e0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d125      	bne.n	800286a <UART_SetConfig+0x272>
 800281e:	4b29      	ldr	r3, [pc, #164]	@ (80028c4 <UART_SetConfig+0x2cc>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002824:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002828:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800282c:	d017      	beq.n	800285e <UART_SetConfig+0x266>
 800282e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002832:	d817      	bhi.n	8002864 <UART_SetConfig+0x26c>
 8002834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002838:	d00b      	beq.n	8002852 <UART_SetConfig+0x25a>
 800283a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800283e:	d811      	bhi.n	8002864 <UART_SetConfig+0x26c>
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <UART_SetConfig+0x254>
 8002844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002848:	d006      	beq.n	8002858 <UART_SetConfig+0x260>
 800284a:	e00b      	b.n	8002864 <UART_SetConfig+0x26c>
 800284c:	2301      	movs	r3, #1
 800284e:	77fb      	strb	r3, [r7, #31]
 8002850:	e076      	b.n	8002940 <UART_SetConfig+0x348>
 8002852:	2302      	movs	r3, #2
 8002854:	77fb      	strb	r3, [r7, #31]
 8002856:	e073      	b.n	8002940 <UART_SetConfig+0x348>
 8002858:	2304      	movs	r3, #4
 800285a:	77fb      	strb	r3, [r7, #31]
 800285c:	e070      	b.n	8002940 <UART_SetConfig+0x348>
 800285e:	2308      	movs	r3, #8
 8002860:	77fb      	strb	r3, [r7, #31]
 8002862:	e06d      	b.n	8002940 <UART_SetConfig+0x348>
 8002864:	2310      	movs	r3, #16
 8002866:	77fb      	strb	r3, [r7, #31]
 8002868:	e06a      	b.n	8002940 <UART_SetConfig+0x348>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1b      	ldr	r2, [pc, #108]	@ (80028dc <UART_SetConfig+0x2e4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d138      	bne.n	80028e6 <UART_SetConfig+0x2ee>
 8002874:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <UART_SetConfig+0x2cc>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800287e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002882:	d017      	beq.n	80028b4 <UART_SetConfig+0x2bc>
 8002884:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002888:	d82a      	bhi.n	80028e0 <UART_SetConfig+0x2e8>
 800288a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800288e:	d00b      	beq.n	80028a8 <UART_SetConfig+0x2b0>
 8002890:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002894:	d824      	bhi.n	80028e0 <UART_SetConfig+0x2e8>
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <UART_SetConfig+0x2aa>
 800289a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800289e:	d006      	beq.n	80028ae <UART_SetConfig+0x2b6>
 80028a0:	e01e      	b.n	80028e0 <UART_SetConfig+0x2e8>
 80028a2:	2300      	movs	r3, #0
 80028a4:	77fb      	strb	r3, [r7, #31]
 80028a6:	e04b      	b.n	8002940 <UART_SetConfig+0x348>
 80028a8:	2302      	movs	r3, #2
 80028aa:	77fb      	strb	r3, [r7, #31]
 80028ac:	e048      	b.n	8002940 <UART_SetConfig+0x348>
 80028ae:	2304      	movs	r3, #4
 80028b0:	77fb      	strb	r3, [r7, #31]
 80028b2:	e045      	b.n	8002940 <UART_SetConfig+0x348>
 80028b4:	2308      	movs	r3, #8
 80028b6:	77fb      	strb	r3, [r7, #31]
 80028b8:	e042      	b.n	8002940 <UART_SetConfig+0x348>
 80028ba:	bf00      	nop
 80028bc:	efff69f3 	.word	0xefff69f3
 80028c0:	40011000 	.word	0x40011000
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40004400 	.word	0x40004400
 80028cc:	40004800 	.word	0x40004800
 80028d0:	40004c00 	.word	0x40004c00
 80028d4:	40005000 	.word	0x40005000
 80028d8:	40011400 	.word	0x40011400
 80028dc:	40007800 	.word	0x40007800
 80028e0:	2310      	movs	r3, #16
 80028e2:	77fb      	strb	r3, [r7, #31]
 80028e4:	e02c      	b.n	8002940 <UART_SetConfig+0x348>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a72      	ldr	r2, [pc, #456]	@ (8002ab4 <UART_SetConfig+0x4bc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d125      	bne.n	800293c <UART_SetConfig+0x344>
 80028f0:	4b71      	ldr	r3, [pc, #452]	@ (8002ab8 <UART_SetConfig+0x4c0>)
 80028f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80028fa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80028fe:	d017      	beq.n	8002930 <UART_SetConfig+0x338>
 8002900:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002904:	d817      	bhi.n	8002936 <UART_SetConfig+0x33e>
 8002906:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800290a:	d00b      	beq.n	8002924 <UART_SetConfig+0x32c>
 800290c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002910:	d811      	bhi.n	8002936 <UART_SetConfig+0x33e>
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <UART_SetConfig+0x326>
 8002916:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800291a:	d006      	beq.n	800292a <UART_SetConfig+0x332>
 800291c:	e00b      	b.n	8002936 <UART_SetConfig+0x33e>
 800291e:	2300      	movs	r3, #0
 8002920:	77fb      	strb	r3, [r7, #31]
 8002922:	e00d      	b.n	8002940 <UART_SetConfig+0x348>
 8002924:	2302      	movs	r3, #2
 8002926:	77fb      	strb	r3, [r7, #31]
 8002928:	e00a      	b.n	8002940 <UART_SetConfig+0x348>
 800292a:	2304      	movs	r3, #4
 800292c:	77fb      	strb	r3, [r7, #31]
 800292e:	e007      	b.n	8002940 <UART_SetConfig+0x348>
 8002930:	2308      	movs	r3, #8
 8002932:	77fb      	strb	r3, [r7, #31]
 8002934:	e004      	b.n	8002940 <UART_SetConfig+0x348>
 8002936:	2310      	movs	r3, #16
 8002938:	77fb      	strb	r3, [r7, #31]
 800293a:	e001      	b.n	8002940 <UART_SetConfig+0x348>
 800293c:	2310      	movs	r3, #16
 800293e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002948:	d15b      	bne.n	8002a02 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800294a:	7ffb      	ldrb	r3, [r7, #31]
 800294c:	2b08      	cmp	r3, #8
 800294e:	d828      	bhi.n	80029a2 <UART_SetConfig+0x3aa>
 8002950:	a201      	add	r2, pc, #4	@ (adr r2, 8002958 <UART_SetConfig+0x360>)
 8002952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002956:	bf00      	nop
 8002958:	0800297d 	.word	0x0800297d
 800295c:	08002985 	.word	0x08002985
 8002960:	0800298d 	.word	0x0800298d
 8002964:	080029a3 	.word	0x080029a3
 8002968:	08002993 	.word	0x08002993
 800296c:	080029a3 	.word	0x080029a3
 8002970:	080029a3 	.word	0x080029a3
 8002974:	080029a3 	.word	0x080029a3
 8002978:	0800299b 	.word	0x0800299b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800297c:	f7ff f91a 	bl	8001bb4 <HAL_RCC_GetPCLK1Freq>
 8002980:	61b8      	str	r0, [r7, #24]
        break;
 8002982:	e013      	b.n	80029ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002984:	f7ff f92a 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 8002988:	61b8      	str	r0, [r7, #24]
        break;
 800298a:	e00f      	b.n	80029ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800298c:	4b4b      	ldr	r3, [pc, #300]	@ (8002abc <UART_SetConfig+0x4c4>)
 800298e:	61bb      	str	r3, [r7, #24]
        break;
 8002990:	e00c      	b.n	80029ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002992:	f7ff f83d 	bl	8001a10 <HAL_RCC_GetSysClockFreq>
 8002996:	61b8      	str	r0, [r7, #24]
        break;
 8002998:	e008      	b.n	80029ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800299a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800299e:	61bb      	str	r3, [r7, #24]
        break;
 80029a0:	e004      	b.n	80029ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	77bb      	strb	r3, [r7, #30]
        break;
 80029aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d074      	beq.n	8002a9c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	005a      	lsls	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	085b      	lsrs	r3, r3, #1
 80029bc:	441a      	add	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	2b0f      	cmp	r3, #15
 80029cc:	d916      	bls.n	80029fc <UART_SetConfig+0x404>
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d4:	d212      	bcs.n	80029fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	f023 030f 	bic.w	r3, r3, #15
 80029de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	89fb      	ldrh	r3, [r7, #14]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	89fa      	ldrh	r2, [r7, #14]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	e04f      	b.n	8002a9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	77bb      	strb	r3, [r7, #30]
 8002a00:	e04c      	b.n	8002a9c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a02:	7ffb      	ldrb	r3, [r7, #31]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d828      	bhi.n	8002a5a <UART_SetConfig+0x462>
 8002a08:	a201      	add	r2, pc, #4	@ (adr r2, 8002a10 <UART_SetConfig+0x418>)
 8002a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0e:	bf00      	nop
 8002a10:	08002a35 	.word	0x08002a35
 8002a14:	08002a3d 	.word	0x08002a3d
 8002a18:	08002a45 	.word	0x08002a45
 8002a1c:	08002a5b 	.word	0x08002a5b
 8002a20:	08002a4b 	.word	0x08002a4b
 8002a24:	08002a5b 	.word	0x08002a5b
 8002a28:	08002a5b 	.word	0x08002a5b
 8002a2c:	08002a5b 	.word	0x08002a5b
 8002a30:	08002a53 	.word	0x08002a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a34:	f7ff f8be 	bl	8001bb4 <HAL_RCC_GetPCLK1Freq>
 8002a38:	61b8      	str	r0, [r7, #24]
        break;
 8002a3a:	e013      	b.n	8002a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a3c:	f7ff f8ce 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 8002a40:	61b8      	str	r0, [r7, #24]
        break;
 8002a42:	e00f      	b.n	8002a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a44:	4b1d      	ldr	r3, [pc, #116]	@ (8002abc <UART_SetConfig+0x4c4>)
 8002a46:	61bb      	str	r3, [r7, #24]
        break;
 8002a48:	e00c      	b.n	8002a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a4a:	f7fe ffe1 	bl	8001a10 <HAL_RCC_GetSysClockFreq>
 8002a4e:	61b8      	str	r0, [r7, #24]
        break;
 8002a50:	e008      	b.n	8002a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a56:	61bb      	str	r3, [r7, #24]
        break;
 8002a58:	e004      	b.n	8002a64 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	77bb      	strb	r3, [r7, #30]
        break;
 8002a62:	bf00      	nop
    }

    if (pclk != 0U)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d018      	beq.n	8002a9c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	085a      	lsrs	r2, r3, #1
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	441a      	add	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	2b0f      	cmp	r3, #15
 8002a82:	d909      	bls.n	8002a98 <UART_SetConfig+0x4a0>
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a8a:	d205      	bcs.n	8002a98 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	e001      	b.n	8002a9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002aa8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40007c00 	.word	0x40007c00
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	00f42400 	.word	0x00f42400

08002ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01a      	beq.n	8002bd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bbe:	d10a      	bne.n	8002bd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	605a      	str	r2, [r3, #4]
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c14:	f7fe f80a 	bl	8000c2c <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d10e      	bne.n	8002c46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f831 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e027      	b.n	8002c96 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d10e      	bne.n	8002c72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f81b 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e011      	b.n	8002c96 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b09c      	sub	sp, #112	@ 0x70
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	4613      	mov	r3, r2
 8002cac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cae:	e0a7      	b.n	8002e00 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb6:	f000 80a3 	beq.w	8002e00 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cba:	f7fd ffb7 	bl	8000c2c <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d302      	bcc.n	8002cd0 <UART_WaitOnFlagUntilTimeout+0x32>
 8002cca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d13f      	bne.n	8002d50 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cd8:	e853 3f00 	ldrex	r3, [r3]
 8002cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8002cde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ce0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002ce4:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002cf0:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002cf4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002cf6:	e841 2300 	strex	r3, r2, [r1]
 8002cfa:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8002cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1e6      	bne.n	8002cd0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3308      	adds	r3, #8
 8002d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3308      	adds	r3, #8
 8002d20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002d22:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002d24:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002d28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d2a:	e841 2300 	strex	r3, r2, [r1]
 8002d2e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8002d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1e5      	bne.n	8002d02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e068      	b.n	8002e22 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d050      	beq.n	8002e00 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d6c:	d148      	bne.n	8002e00 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d76:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d80:	e853 3f00 	ldrex	r3, [r3]
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002d8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d98:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d9e:	e841 2300 	strex	r3, r2, [r1]
 8002da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1e6      	bne.n	8002d78 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3308      	adds	r3, #8
 8002db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	e853 3f00 	ldrex	r3, [r3]
 8002db8:	613b      	str	r3, [r7, #16]
   return(result);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	3308      	adds	r3, #8
 8002dc8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002dca:	623a      	str	r2, [r7, #32]
 8002dcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dce:	69f9      	ldr	r1, [r7, #28]
 8002dd0:	6a3a      	ldr	r2, [r7, #32]
 8002dd2:	e841 2300 	strex	r3, r2, [r1]
 8002dd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1e5      	bne.n	8002daa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e010      	b.n	8002e22 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69da      	ldr	r2, [r3, #28]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	f43f af48 	beq.w	8002cb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3770      	adds	r7, #112	@ 0x70
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <std>:
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	b510      	push	{r4, lr}
 8002e30:	4604      	mov	r4, r0
 8002e32:	e9c0 3300 	strd	r3, r3, [r0]
 8002e36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e3a:	6083      	str	r3, [r0, #8]
 8002e3c:	8181      	strh	r1, [r0, #12]
 8002e3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002e40:	81c2      	strh	r2, [r0, #14]
 8002e42:	6183      	str	r3, [r0, #24]
 8002e44:	4619      	mov	r1, r3
 8002e46:	2208      	movs	r2, #8
 8002e48:	305c      	adds	r0, #92	@ 0x5c
 8002e4a:	f000 f9f9 	bl	8003240 <memset>
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e84 <std+0x58>)
 8002e50:	6263      	str	r3, [r4, #36]	@ 0x24
 8002e52:	4b0d      	ldr	r3, [pc, #52]	@ (8002e88 <std+0x5c>)
 8002e54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002e56:	4b0d      	ldr	r3, [pc, #52]	@ (8002e8c <std+0x60>)
 8002e58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e90 <std+0x64>)
 8002e5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e94 <std+0x68>)
 8002e60:	6224      	str	r4, [r4, #32]
 8002e62:	429c      	cmp	r4, r3
 8002e64:	d006      	beq.n	8002e74 <std+0x48>
 8002e66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002e6a:	4294      	cmp	r4, r2
 8002e6c:	d002      	beq.n	8002e74 <std+0x48>
 8002e6e:	33d0      	adds	r3, #208	@ 0xd0
 8002e70:	429c      	cmp	r4, r3
 8002e72:	d105      	bne.n	8002e80 <std+0x54>
 8002e74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e7c:	f000 ba58 	b.w	8003330 <__retarget_lock_init_recursive>
 8002e80:	bd10      	pop	{r4, pc}
 8002e82:	bf00      	nop
 8002e84:	08003091 	.word	0x08003091
 8002e88:	080030b3 	.word	0x080030b3
 8002e8c:	080030eb 	.word	0x080030eb
 8002e90:	0800310f 	.word	0x0800310f
 8002e94:	20000114 	.word	0x20000114

08002e98 <stdio_exit_handler>:
 8002e98:	4a02      	ldr	r2, [pc, #8]	@ (8002ea4 <stdio_exit_handler+0xc>)
 8002e9a:	4903      	ldr	r1, [pc, #12]	@ (8002ea8 <stdio_exit_handler+0x10>)
 8002e9c:	4803      	ldr	r0, [pc, #12]	@ (8002eac <stdio_exit_handler+0x14>)
 8002e9e:	f000 b869 	b.w	8002f74 <_fwalk_sglue>
 8002ea2:	bf00      	nop
 8002ea4:	2000000c 	.word	0x2000000c
 8002ea8:	08003bd1 	.word	0x08003bd1
 8002eac:	2000001c 	.word	0x2000001c

08002eb0 <cleanup_stdio>:
 8002eb0:	6841      	ldr	r1, [r0, #4]
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee4 <cleanup_stdio+0x34>)
 8002eb4:	4299      	cmp	r1, r3
 8002eb6:	b510      	push	{r4, lr}
 8002eb8:	4604      	mov	r4, r0
 8002eba:	d001      	beq.n	8002ec0 <cleanup_stdio+0x10>
 8002ebc:	f000 fe88 	bl	8003bd0 <_fflush_r>
 8002ec0:	68a1      	ldr	r1, [r4, #8]
 8002ec2:	4b09      	ldr	r3, [pc, #36]	@ (8002ee8 <cleanup_stdio+0x38>)
 8002ec4:	4299      	cmp	r1, r3
 8002ec6:	d002      	beq.n	8002ece <cleanup_stdio+0x1e>
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f000 fe81 	bl	8003bd0 <_fflush_r>
 8002ece:	68e1      	ldr	r1, [r4, #12]
 8002ed0:	4b06      	ldr	r3, [pc, #24]	@ (8002eec <cleanup_stdio+0x3c>)
 8002ed2:	4299      	cmp	r1, r3
 8002ed4:	d004      	beq.n	8002ee0 <cleanup_stdio+0x30>
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002edc:	f000 be78 	b.w	8003bd0 <_fflush_r>
 8002ee0:	bd10      	pop	{r4, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000114 	.word	0x20000114
 8002ee8:	2000017c 	.word	0x2000017c
 8002eec:	200001e4 	.word	0x200001e4

08002ef0 <global_stdio_init.part.0>:
 8002ef0:	b510      	push	{r4, lr}
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <global_stdio_init.part.0+0x30>)
 8002ef4:	4c0b      	ldr	r4, [pc, #44]	@ (8002f24 <global_stdio_init.part.0+0x34>)
 8002ef6:	4a0c      	ldr	r2, [pc, #48]	@ (8002f28 <global_stdio_init.part.0+0x38>)
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	4620      	mov	r0, r4
 8002efc:	2200      	movs	r2, #0
 8002efe:	2104      	movs	r1, #4
 8002f00:	f7ff ff94 	bl	8002e2c <std>
 8002f04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002f08:	2201      	movs	r2, #1
 8002f0a:	2109      	movs	r1, #9
 8002f0c:	f7ff ff8e 	bl	8002e2c <std>
 8002f10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002f14:	2202      	movs	r2, #2
 8002f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f1a:	2112      	movs	r1, #18
 8002f1c:	f7ff bf86 	b.w	8002e2c <std>
 8002f20:	2000024c 	.word	0x2000024c
 8002f24:	20000114 	.word	0x20000114
 8002f28:	08002e99 	.word	0x08002e99

08002f2c <__sfp_lock_acquire>:
 8002f2c:	4801      	ldr	r0, [pc, #4]	@ (8002f34 <__sfp_lock_acquire+0x8>)
 8002f2e:	f000 ba00 	b.w	8003332 <__retarget_lock_acquire_recursive>
 8002f32:	bf00      	nop
 8002f34:	20000255 	.word	0x20000255

08002f38 <__sfp_lock_release>:
 8002f38:	4801      	ldr	r0, [pc, #4]	@ (8002f40 <__sfp_lock_release+0x8>)
 8002f3a:	f000 b9fb 	b.w	8003334 <__retarget_lock_release_recursive>
 8002f3e:	bf00      	nop
 8002f40:	20000255 	.word	0x20000255

08002f44 <__sinit>:
 8002f44:	b510      	push	{r4, lr}
 8002f46:	4604      	mov	r4, r0
 8002f48:	f7ff fff0 	bl	8002f2c <__sfp_lock_acquire>
 8002f4c:	6a23      	ldr	r3, [r4, #32]
 8002f4e:	b11b      	cbz	r3, 8002f58 <__sinit+0x14>
 8002f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f54:	f7ff bff0 	b.w	8002f38 <__sfp_lock_release>
 8002f58:	4b04      	ldr	r3, [pc, #16]	@ (8002f6c <__sinit+0x28>)
 8002f5a:	6223      	str	r3, [r4, #32]
 8002f5c:	4b04      	ldr	r3, [pc, #16]	@ (8002f70 <__sinit+0x2c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1f5      	bne.n	8002f50 <__sinit+0xc>
 8002f64:	f7ff ffc4 	bl	8002ef0 <global_stdio_init.part.0>
 8002f68:	e7f2      	b.n	8002f50 <__sinit+0xc>
 8002f6a:	bf00      	nop
 8002f6c:	08002eb1 	.word	0x08002eb1
 8002f70:	2000024c 	.word	0x2000024c

08002f74 <_fwalk_sglue>:
 8002f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f78:	4607      	mov	r7, r0
 8002f7a:	4688      	mov	r8, r1
 8002f7c:	4614      	mov	r4, r2
 8002f7e:	2600      	movs	r6, #0
 8002f80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f84:	f1b9 0901 	subs.w	r9, r9, #1
 8002f88:	d505      	bpl.n	8002f96 <_fwalk_sglue+0x22>
 8002f8a:	6824      	ldr	r4, [r4, #0]
 8002f8c:	2c00      	cmp	r4, #0
 8002f8e:	d1f7      	bne.n	8002f80 <_fwalk_sglue+0xc>
 8002f90:	4630      	mov	r0, r6
 8002f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f96:	89ab      	ldrh	r3, [r5, #12]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d907      	bls.n	8002fac <_fwalk_sglue+0x38>
 8002f9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	d003      	beq.n	8002fac <_fwalk_sglue+0x38>
 8002fa4:	4629      	mov	r1, r5
 8002fa6:	4638      	mov	r0, r7
 8002fa8:	47c0      	blx	r8
 8002faa:	4306      	orrs	r6, r0
 8002fac:	3568      	adds	r5, #104	@ 0x68
 8002fae:	e7e9      	b.n	8002f84 <_fwalk_sglue+0x10>

08002fb0 <iprintf>:
 8002fb0:	b40f      	push	{r0, r1, r2, r3}
 8002fb2:	b507      	push	{r0, r1, r2, lr}
 8002fb4:	4906      	ldr	r1, [pc, #24]	@ (8002fd0 <iprintf+0x20>)
 8002fb6:	ab04      	add	r3, sp, #16
 8002fb8:	6808      	ldr	r0, [r1, #0]
 8002fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fbe:	6881      	ldr	r1, [r0, #8]
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	f000 fadb 	bl	800357c <_vfiprintf_r>
 8002fc6:	b003      	add	sp, #12
 8002fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fcc:	b004      	add	sp, #16
 8002fce:	4770      	bx	lr
 8002fd0:	20000018 	.word	0x20000018

08002fd4 <_puts_r>:
 8002fd4:	6a03      	ldr	r3, [r0, #32]
 8002fd6:	b570      	push	{r4, r5, r6, lr}
 8002fd8:	6884      	ldr	r4, [r0, #8]
 8002fda:	4605      	mov	r5, r0
 8002fdc:	460e      	mov	r6, r1
 8002fde:	b90b      	cbnz	r3, 8002fe4 <_puts_r+0x10>
 8002fe0:	f7ff ffb0 	bl	8002f44 <__sinit>
 8002fe4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002fe6:	07db      	lsls	r3, r3, #31
 8002fe8:	d405      	bmi.n	8002ff6 <_puts_r+0x22>
 8002fea:	89a3      	ldrh	r3, [r4, #12]
 8002fec:	0598      	lsls	r0, r3, #22
 8002fee:	d402      	bmi.n	8002ff6 <_puts_r+0x22>
 8002ff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ff2:	f000 f99e 	bl	8003332 <__retarget_lock_acquire_recursive>
 8002ff6:	89a3      	ldrh	r3, [r4, #12]
 8002ff8:	0719      	lsls	r1, r3, #28
 8002ffa:	d502      	bpl.n	8003002 <_puts_r+0x2e>
 8002ffc:	6923      	ldr	r3, [r4, #16]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d135      	bne.n	800306e <_puts_r+0x9a>
 8003002:	4621      	mov	r1, r4
 8003004:	4628      	mov	r0, r5
 8003006:	f000 f8c5 	bl	8003194 <__swsetup_r>
 800300a:	b380      	cbz	r0, 800306e <_puts_r+0x9a>
 800300c:	f04f 35ff 	mov.w	r5, #4294967295
 8003010:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003012:	07da      	lsls	r2, r3, #31
 8003014:	d405      	bmi.n	8003022 <_puts_r+0x4e>
 8003016:	89a3      	ldrh	r3, [r4, #12]
 8003018:	059b      	lsls	r3, r3, #22
 800301a:	d402      	bmi.n	8003022 <_puts_r+0x4e>
 800301c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800301e:	f000 f989 	bl	8003334 <__retarget_lock_release_recursive>
 8003022:	4628      	mov	r0, r5
 8003024:	bd70      	pop	{r4, r5, r6, pc}
 8003026:	2b00      	cmp	r3, #0
 8003028:	da04      	bge.n	8003034 <_puts_r+0x60>
 800302a:	69a2      	ldr	r2, [r4, #24]
 800302c:	429a      	cmp	r2, r3
 800302e:	dc17      	bgt.n	8003060 <_puts_r+0x8c>
 8003030:	290a      	cmp	r1, #10
 8003032:	d015      	beq.n	8003060 <_puts_r+0x8c>
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	6022      	str	r2, [r4, #0]
 800303a:	7019      	strb	r1, [r3, #0]
 800303c:	68a3      	ldr	r3, [r4, #8]
 800303e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003042:	3b01      	subs	r3, #1
 8003044:	60a3      	str	r3, [r4, #8]
 8003046:	2900      	cmp	r1, #0
 8003048:	d1ed      	bne.n	8003026 <_puts_r+0x52>
 800304a:	2b00      	cmp	r3, #0
 800304c:	da11      	bge.n	8003072 <_puts_r+0x9e>
 800304e:	4622      	mov	r2, r4
 8003050:	210a      	movs	r1, #10
 8003052:	4628      	mov	r0, r5
 8003054:	f000 f85f 	bl	8003116 <__swbuf_r>
 8003058:	3001      	adds	r0, #1
 800305a:	d0d7      	beq.n	800300c <_puts_r+0x38>
 800305c:	250a      	movs	r5, #10
 800305e:	e7d7      	b.n	8003010 <_puts_r+0x3c>
 8003060:	4622      	mov	r2, r4
 8003062:	4628      	mov	r0, r5
 8003064:	f000 f857 	bl	8003116 <__swbuf_r>
 8003068:	3001      	adds	r0, #1
 800306a:	d1e7      	bne.n	800303c <_puts_r+0x68>
 800306c:	e7ce      	b.n	800300c <_puts_r+0x38>
 800306e:	3e01      	subs	r6, #1
 8003070:	e7e4      	b.n	800303c <_puts_r+0x68>
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	6022      	str	r2, [r4, #0]
 8003078:	220a      	movs	r2, #10
 800307a:	701a      	strb	r2, [r3, #0]
 800307c:	e7ee      	b.n	800305c <_puts_r+0x88>
	...

08003080 <puts>:
 8003080:	4b02      	ldr	r3, [pc, #8]	@ (800308c <puts+0xc>)
 8003082:	4601      	mov	r1, r0
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	f7ff bfa5 	b.w	8002fd4 <_puts_r>
 800308a:	bf00      	nop
 800308c:	20000018 	.word	0x20000018

08003090 <__sread>:
 8003090:	b510      	push	{r4, lr}
 8003092:	460c      	mov	r4, r1
 8003094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003098:	f000 f8fc 	bl	8003294 <_read_r>
 800309c:	2800      	cmp	r0, #0
 800309e:	bfab      	itete	ge
 80030a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80030a2:	89a3      	ldrhlt	r3, [r4, #12]
 80030a4:	181b      	addge	r3, r3, r0
 80030a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80030aa:	bfac      	ite	ge
 80030ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80030ae:	81a3      	strhlt	r3, [r4, #12]
 80030b0:	bd10      	pop	{r4, pc}

080030b2 <__swrite>:
 80030b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030b6:	461f      	mov	r7, r3
 80030b8:	898b      	ldrh	r3, [r1, #12]
 80030ba:	05db      	lsls	r3, r3, #23
 80030bc:	4605      	mov	r5, r0
 80030be:	460c      	mov	r4, r1
 80030c0:	4616      	mov	r6, r2
 80030c2:	d505      	bpl.n	80030d0 <__swrite+0x1e>
 80030c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030c8:	2302      	movs	r3, #2
 80030ca:	2200      	movs	r2, #0
 80030cc:	f000 f8d0 	bl	8003270 <_lseek_r>
 80030d0:	89a3      	ldrh	r3, [r4, #12]
 80030d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030da:	81a3      	strh	r3, [r4, #12]
 80030dc:	4632      	mov	r2, r6
 80030de:	463b      	mov	r3, r7
 80030e0:	4628      	mov	r0, r5
 80030e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030e6:	f000 b8e7 	b.w	80032b8 <_write_r>

080030ea <__sseek>:
 80030ea:	b510      	push	{r4, lr}
 80030ec:	460c      	mov	r4, r1
 80030ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030f2:	f000 f8bd 	bl	8003270 <_lseek_r>
 80030f6:	1c43      	adds	r3, r0, #1
 80030f8:	89a3      	ldrh	r3, [r4, #12]
 80030fa:	bf15      	itete	ne
 80030fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80030fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003102:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003106:	81a3      	strheq	r3, [r4, #12]
 8003108:	bf18      	it	ne
 800310a:	81a3      	strhne	r3, [r4, #12]
 800310c:	bd10      	pop	{r4, pc}

0800310e <__sclose>:
 800310e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003112:	f000 b89d 	b.w	8003250 <_close_r>

08003116 <__swbuf_r>:
 8003116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003118:	460e      	mov	r6, r1
 800311a:	4614      	mov	r4, r2
 800311c:	4605      	mov	r5, r0
 800311e:	b118      	cbz	r0, 8003128 <__swbuf_r+0x12>
 8003120:	6a03      	ldr	r3, [r0, #32]
 8003122:	b90b      	cbnz	r3, 8003128 <__swbuf_r+0x12>
 8003124:	f7ff ff0e 	bl	8002f44 <__sinit>
 8003128:	69a3      	ldr	r3, [r4, #24]
 800312a:	60a3      	str	r3, [r4, #8]
 800312c:	89a3      	ldrh	r3, [r4, #12]
 800312e:	071a      	lsls	r2, r3, #28
 8003130:	d501      	bpl.n	8003136 <__swbuf_r+0x20>
 8003132:	6923      	ldr	r3, [r4, #16]
 8003134:	b943      	cbnz	r3, 8003148 <__swbuf_r+0x32>
 8003136:	4621      	mov	r1, r4
 8003138:	4628      	mov	r0, r5
 800313a:	f000 f82b 	bl	8003194 <__swsetup_r>
 800313e:	b118      	cbz	r0, 8003148 <__swbuf_r+0x32>
 8003140:	f04f 37ff 	mov.w	r7, #4294967295
 8003144:	4638      	mov	r0, r7
 8003146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	6922      	ldr	r2, [r4, #16]
 800314c:	1a98      	subs	r0, r3, r2
 800314e:	6963      	ldr	r3, [r4, #20]
 8003150:	b2f6      	uxtb	r6, r6
 8003152:	4283      	cmp	r3, r0
 8003154:	4637      	mov	r7, r6
 8003156:	dc05      	bgt.n	8003164 <__swbuf_r+0x4e>
 8003158:	4621      	mov	r1, r4
 800315a:	4628      	mov	r0, r5
 800315c:	f000 fd38 	bl	8003bd0 <_fflush_r>
 8003160:	2800      	cmp	r0, #0
 8003162:	d1ed      	bne.n	8003140 <__swbuf_r+0x2a>
 8003164:	68a3      	ldr	r3, [r4, #8]
 8003166:	3b01      	subs	r3, #1
 8003168:	60a3      	str	r3, [r4, #8]
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	6022      	str	r2, [r4, #0]
 8003170:	701e      	strb	r6, [r3, #0]
 8003172:	6962      	ldr	r2, [r4, #20]
 8003174:	1c43      	adds	r3, r0, #1
 8003176:	429a      	cmp	r2, r3
 8003178:	d004      	beq.n	8003184 <__swbuf_r+0x6e>
 800317a:	89a3      	ldrh	r3, [r4, #12]
 800317c:	07db      	lsls	r3, r3, #31
 800317e:	d5e1      	bpl.n	8003144 <__swbuf_r+0x2e>
 8003180:	2e0a      	cmp	r6, #10
 8003182:	d1df      	bne.n	8003144 <__swbuf_r+0x2e>
 8003184:	4621      	mov	r1, r4
 8003186:	4628      	mov	r0, r5
 8003188:	f000 fd22 	bl	8003bd0 <_fflush_r>
 800318c:	2800      	cmp	r0, #0
 800318e:	d0d9      	beq.n	8003144 <__swbuf_r+0x2e>
 8003190:	e7d6      	b.n	8003140 <__swbuf_r+0x2a>
	...

08003194 <__swsetup_r>:
 8003194:	b538      	push	{r3, r4, r5, lr}
 8003196:	4b29      	ldr	r3, [pc, #164]	@ (800323c <__swsetup_r+0xa8>)
 8003198:	4605      	mov	r5, r0
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	460c      	mov	r4, r1
 800319e:	b118      	cbz	r0, 80031a8 <__swsetup_r+0x14>
 80031a0:	6a03      	ldr	r3, [r0, #32]
 80031a2:	b90b      	cbnz	r3, 80031a8 <__swsetup_r+0x14>
 80031a4:	f7ff fece 	bl	8002f44 <__sinit>
 80031a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031ac:	0719      	lsls	r1, r3, #28
 80031ae:	d422      	bmi.n	80031f6 <__swsetup_r+0x62>
 80031b0:	06da      	lsls	r2, r3, #27
 80031b2:	d407      	bmi.n	80031c4 <__swsetup_r+0x30>
 80031b4:	2209      	movs	r2, #9
 80031b6:	602a      	str	r2, [r5, #0]
 80031b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031bc:	81a3      	strh	r3, [r4, #12]
 80031be:	f04f 30ff 	mov.w	r0, #4294967295
 80031c2:	e033      	b.n	800322c <__swsetup_r+0x98>
 80031c4:	0758      	lsls	r0, r3, #29
 80031c6:	d512      	bpl.n	80031ee <__swsetup_r+0x5a>
 80031c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80031ca:	b141      	cbz	r1, 80031de <__swsetup_r+0x4a>
 80031cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80031d0:	4299      	cmp	r1, r3
 80031d2:	d002      	beq.n	80031da <__swsetup_r+0x46>
 80031d4:	4628      	mov	r0, r5
 80031d6:	f000 f8af 	bl	8003338 <_free_r>
 80031da:	2300      	movs	r3, #0
 80031dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80031de:	89a3      	ldrh	r3, [r4, #12]
 80031e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80031e4:	81a3      	strh	r3, [r4, #12]
 80031e6:	2300      	movs	r3, #0
 80031e8:	6063      	str	r3, [r4, #4]
 80031ea:	6923      	ldr	r3, [r4, #16]
 80031ec:	6023      	str	r3, [r4, #0]
 80031ee:	89a3      	ldrh	r3, [r4, #12]
 80031f0:	f043 0308 	orr.w	r3, r3, #8
 80031f4:	81a3      	strh	r3, [r4, #12]
 80031f6:	6923      	ldr	r3, [r4, #16]
 80031f8:	b94b      	cbnz	r3, 800320e <__swsetup_r+0x7a>
 80031fa:	89a3      	ldrh	r3, [r4, #12]
 80031fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003204:	d003      	beq.n	800320e <__swsetup_r+0x7a>
 8003206:	4621      	mov	r1, r4
 8003208:	4628      	mov	r0, r5
 800320a:	f000 fd2f 	bl	8003c6c <__smakebuf_r>
 800320e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003212:	f013 0201 	ands.w	r2, r3, #1
 8003216:	d00a      	beq.n	800322e <__swsetup_r+0x9a>
 8003218:	2200      	movs	r2, #0
 800321a:	60a2      	str	r2, [r4, #8]
 800321c:	6962      	ldr	r2, [r4, #20]
 800321e:	4252      	negs	r2, r2
 8003220:	61a2      	str	r2, [r4, #24]
 8003222:	6922      	ldr	r2, [r4, #16]
 8003224:	b942      	cbnz	r2, 8003238 <__swsetup_r+0xa4>
 8003226:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800322a:	d1c5      	bne.n	80031b8 <__swsetup_r+0x24>
 800322c:	bd38      	pop	{r3, r4, r5, pc}
 800322e:	0799      	lsls	r1, r3, #30
 8003230:	bf58      	it	pl
 8003232:	6962      	ldrpl	r2, [r4, #20]
 8003234:	60a2      	str	r2, [r4, #8]
 8003236:	e7f4      	b.n	8003222 <__swsetup_r+0x8e>
 8003238:	2000      	movs	r0, #0
 800323a:	e7f7      	b.n	800322c <__swsetup_r+0x98>
 800323c:	20000018 	.word	0x20000018

08003240 <memset>:
 8003240:	4402      	add	r2, r0
 8003242:	4603      	mov	r3, r0
 8003244:	4293      	cmp	r3, r2
 8003246:	d100      	bne.n	800324a <memset+0xa>
 8003248:	4770      	bx	lr
 800324a:	f803 1b01 	strb.w	r1, [r3], #1
 800324e:	e7f9      	b.n	8003244 <memset+0x4>

08003250 <_close_r>:
 8003250:	b538      	push	{r3, r4, r5, lr}
 8003252:	4d06      	ldr	r5, [pc, #24]	@ (800326c <_close_r+0x1c>)
 8003254:	2300      	movs	r3, #0
 8003256:	4604      	mov	r4, r0
 8003258:	4608      	mov	r0, r1
 800325a:	602b      	str	r3, [r5, #0]
 800325c:	f7fd fbf0 	bl	8000a40 <_close>
 8003260:	1c43      	adds	r3, r0, #1
 8003262:	d102      	bne.n	800326a <_close_r+0x1a>
 8003264:	682b      	ldr	r3, [r5, #0]
 8003266:	b103      	cbz	r3, 800326a <_close_r+0x1a>
 8003268:	6023      	str	r3, [r4, #0]
 800326a:	bd38      	pop	{r3, r4, r5, pc}
 800326c:	20000250 	.word	0x20000250

08003270 <_lseek_r>:
 8003270:	b538      	push	{r3, r4, r5, lr}
 8003272:	4d07      	ldr	r5, [pc, #28]	@ (8003290 <_lseek_r+0x20>)
 8003274:	4604      	mov	r4, r0
 8003276:	4608      	mov	r0, r1
 8003278:	4611      	mov	r1, r2
 800327a:	2200      	movs	r2, #0
 800327c:	602a      	str	r2, [r5, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	f7fd fc05 	bl	8000a8e <_lseek>
 8003284:	1c43      	adds	r3, r0, #1
 8003286:	d102      	bne.n	800328e <_lseek_r+0x1e>
 8003288:	682b      	ldr	r3, [r5, #0]
 800328a:	b103      	cbz	r3, 800328e <_lseek_r+0x1e>
 800328c:	6023      	str	r3, [r4, #0]
 800328e:	bd38      	pop	{r3, r4, r5, pc}
 8003290:	20000250 	.word	0x20000250

08003294 <_read_r>:
 8003294:	b538      	push	{r3, r4, r5, lr}
 8003296:	4d07      	ldr	r5, [pc, #28]	@ (80032b4 <_read_r+0x20>)
 8003298:	4604      	mov	r4, r0
 800329a:	4608      	mov	r0, r1
 800329c:	4611      	mov	r1, r2
 800329e:	2200      	movs	r2, #0
 80032a0:	602a      	str	r2, [r5, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	f7fd fb93 	bl	80009ce <_read>
 80032a8:	1c43      	adds	r3, r0, #1
 80032aa:	d102      	bne.n	80032b2 <_read_r+0x1e>
 80032ac:	682b      	ldr	r3, [r5, #0]
 80032ae:	b103      	cbz	r3, 80032b2 <_read_r+0x1e>
 80032b0:	6023      	str	r3, [r4, #0]
 80032b2:	bd38      	pop	{r3, r4, r5, pc}
 80032b4:	20000250 	.word	0x20000250

080032b8 <_write_r>:
 80032b8:	b538      	push	{r3, r4, r5, lr}
 80032ba:	4d07      	ldr	r5, [pc, #28]	@ (80032d8 <_write_r+0x20>)
 80032bc:	4604      	mov	r4, r0
 80032be:	4608      	mov	r0, r1
 80032c0:	4611      	mov	r1, r2
 80032c2:	2200      	movs	r2, #0
 80032c4:	602a      	str	r2, [r5, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	f7fd fb9e 	bl	8000a08 <_write>
 80032cc:	1c43      	adds	r3, r0, #1
 80032ce:	d102      	bne.n	80032d6 <_write_r+0x1e>
 80032d0:	682b      	ldr	r3, [r5, #0]
 80032d2:	b103      	cbz	r3, 80032d6 <_write_r+0x1e>
 80032d4:	6023      	str	r3, [r4, #0]
 80032d6:	bd38      	pop	{r3, r4, r5, pc}
 80032d8:	20000250 	.word	0x20000250

080032dc <__errno>:
 80032dc:	4b01      	ldr	r3, [pc, #4]	@ (80032e4 <__errno+0x8>)
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000018 	.word	0x20000018

080032e8 <__libc_init_array>:
 80032e8:	b570      	push	{r4, r5, r6, lr}
 80032ea:	4d0d      	ldr	r5, [pc, #52]	@ (8003320 <__libc_init_array+0x38>)
 80032ec:	4c0d      	ldr	r4, [pc, #52]	@ (8003324 <__libc_init_array+0x3c>)
 80032ee:	1b64      	subs	r4, r4, r5
 80032f0:	10a4      	asrs	r4, r4, #2
 80032f2:	2600      	movs	r6, #0
 80032f4:	42a6      	cmp	r6, r4
 80032f6:	d109      	bne.n	800330c <__libc_init_array+0x24>
 80032f8:	4d0b      	ldr	r5, [pc, #44]	@ (8003328 <__libc_init_array+0x40>)
 80032fa:	4c0c      	ldr	r4, [pc, #48]	@ (800332c <__libc_init_array+0x44>)
 80032fc:	f000 fd24 	bl	8003d48 <_init>
 8003300:	1b64      	subs	r4, r4, r5
 8003302:	10a4      	asrs	r4, r4, #2
 8003304:	2600      	movs	r6, #0
 8003306:	42a6      	cmp	r6, r4
 8003308:	d105      	bne.n	8003316 <__libc_init_array+0x2e>
 800330a:	bd70      	pop	{r4, r5, r6, pc}
 800330c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003310:	4798      	blx	r3
 8003312:	3601      	adds	r6, #1
 8003314:	e7ee      	b.n	80032f4 <__libc_init_array+0xc>
 8003316:	f855 3b04 	ldr.w	r3, [r5], #4
 800331a:	4798      	blx	r3
 800331c:	3601      	adds	r6, #1
 800331e:	e7f2      	b.n	8003306 <__libc_init_array+0x1e>
 8003320:	08003dec 	.word	0x08003dec
 8003324:	08003dec 	.word	0x08003dec
 8003328:	08003dec 	.word	0x08003dec
 800332c:	08003df0 	.word	0x08003df0

08003330 <__retarget_lock_init_recursive>:
 8003330:	4770      	bx	lr

08003332 <__retarget_lock_acquire_recursive>:
 8003332:	4770      	bx	lr

08003334 <__retarget_lock_release_recursive>:
 8003334:	4770      	bx	lr
	...

08003338 <_free_r>:
 8003338:	b538      	push	{r3, r4, r5, lr}
 800333a:	4605      	mov	r5, r0
 800333c:	2900      	cmp	r1, #0
 800333e:	d041      	beq.n	80033c4 <_free_r+0x8c>
 8003340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003344:	1f0c      	subs	r4, r1, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	bfb8      	it	lt
 800334a:	18e4      	addlt	r4, r4, r3
 800334c:	f000 f8e0 	bl	8003510 <__malloc_lock>
 8003350:	4a1d      	ldr	r2, [pc, #116]	@ (80033c8 <_free_r+0x90>)
 8003352:	6813      	ldr	r3, [r2, #0]
 8003354:	b933      	cbnz	r3, 8003364 <_free_r+0x2c>
 8003356:	6063      	str	r3, [r4, #4]
 8003358:	6014      	str	r4, [r2, #0]
 800335a:	4628      	mov	r0, r5
 800335c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003360:	f000 b8dc 	b.w	800351c <__malloc_unlock>
 8003364:	42a3      	cmp	r3, r4
 8003366:	d908      	bls.n	800337a <_free_r+0x42>
 8003368:	6820      	ldr	r0, [r4, #0]
 800336a:	1821      	adds	r1, r4, r0
 800336c:	428b      	cmp	r3, r1
 800336e:	bf01      	itttt	eq
 8003370:	6819      	ldreq	r1, [r3, #0]
 8003372:	685b      	ldreq	r3, [r3, #4]
 8003374:	1809      	addeq	r1, r1, r0
 8003376:	6021      	streq	r1, [r4, #0]
 8003378:	e7ed      	b.n	8003356 <_free_r+0x1e>
 800337a:	461a      	mov	r2, r3
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	b10b      	cbz	r3, 8003384 <_free_r+0x4c>
 8003380:	42a3      	cmp	r3, r4
 8003382:	d9fa      	bls.n	800337a <_free_r+0x42>
 8003384:	6811      	ldr	r1, [r2, #0]
 8003386:	1850      	adds	r0, r2, r1
 8003388:	42a0      	cmp	r0, r4
 800338a:	d10b      	bne.n	80033a4 <_free_r+0x6c>
 800338c:	6820      	ldr	r0, [r4, #0]
 800338e:	4401      	add	r1, r0
 8003390:	1850      	adds	r0, r2, r1
 8003392:	4283      	cmp	r3, r0
 8003394:	6011      	str	r1, [r2, #0]
 8003396:	d1e0      	bne.n	800335a <_free_r+0x22>
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	6053      	str	r3, [r2, #4]
 800339e:	4408      	add	r0, r1
 80033a0:	6010      	str	r0, [r2, #0]
 80033a2:	e7da      	b.n	800335a <_free_r+0x22>
 80033a4:	d902      	bls.n	80033ac <_free_r+0x74>
 80033a6:	230c      	movs	r3, #12
 80033a8:	602b      	str	r3, [r5, #0]
 80033aa:	e7d6      	b.n	800335a <_free_r+0x22>
 80033ac:	6820      	ldr	r0, [r4, #0]
 80033ae:	1821      	adds	r1, r4, r0
 80033b0:	428b      	cmp	r3, r1
 80033b2:	bf04      	itt	eq
 80033b4:	6819      	ldreq	r1, [r3, #0]
 80033b6:	685b      	ldreq	r3, [r3, #4]
 80033b8:	6063      	str	r3, [r4, #4]
 80033ba:	bf04      	itt	eq
 80033bc:	1809      	addeq	r1, r1, r0
 80033be:	6021      	streq	r1, [r4, #0]
 80033c0:	6054      	str	r4, [r2, #4]
 80033c2:	e7ca      	b.n	800335a <_free_r+0x22>
 80033c4:	bd38      	pop	{r3, r4, r5, pc}
 80033c6:	bf00      	nop
 80033c8:	2000025c 	.word	0x2000025c

080033cc <sbrk_aligned>:
 80033cc:	b570      	push	{r4, r5, r6, lr}
 80033ce:	4e0f      	ldr	r6, [pc, #60]	@ (800340c <sbrk_aligned+0x40>)
 80033d0:	460c      	mov	r4, r1
 80033d2:	6831      	ldr	r1, [r6, #0]
 80033d4:	4605      	mov	r5, r0
 80033d6:	b911      	cbnz	r1, 80033de <sbrk_aligned+0x12>
 80033d8:	f000 fca6 	bl	8003d28 <_sbrk_r>
 80033dc:	6030      	str	r0, [r6, #0]
 80033de:	4621      	mov	r1, r4
 80033e0:	4628      	mov	r0, r5
 80033e2:	f000 fca1 	bl	8003d28 <_sbrk_r>
 80033e6:	1c43      	adds	r3, r0, #1
 80033e8:	d103      	bne.n	80033f2 <sbrk_aligned+0x26>
 80033ea:	f04f 34ff 	mov.w	r4, #4294967295
 80033ee:	4620      	mov	r0, r4
 80033f0:	bd70      	pop	{r4, r5, r6, pc}
 80033f2:	1cc4      	adds	r4, r0, #3
 80033f4:	f024 0403 	bic.w	r4, r4, #3
 80033f8:	42a0      	cmp	r0, r4
 80033fa:	d0f8      	beq.n	80033ee <sbrk_aligned+0x22>
 80033fc:	1a21      	subs	r1, r4, r0
 80033fe:	4628      	mov	r0, r5
 8003400:	f000 fc92 	bl	8003d28 <_sbrk_r>
 8003404:	3001      	adds	r0, #1
 8003406:	d1f2      	bne.n	80033ee <sbrk_aligned+0x22>
 8003408:	e7ef      	b.n	80033ea <sbrk_aligned+0x1e>
 800340a:	bf00      	nop
 800340c:	20000258 	.word	0x20000258

08003410 <_malloc_r>:
 8003410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003414:	1ccd      	adds	r5, r1, #3
 8003416:	f025 0503 	bic.w	r5, r5, #3
 800341a:	3508      	adds	r5, #8
 800341c:	2d0c      	cmp	r5, #12
 800341e:	bf38      	it	cc
 8003420:	250c      	movcc	r5, #12
 8003422:	2d00      	cmp	r5, #0
 8003424:	4606      	mov	r6, r0
 8003426:	db01      	blt.n	800342c <_malloc_r+0x1c>
 8003428:	42a9      	cmp	r1, r5
 800342a:	d904      	bls.n	8003436 <_malloc_r+0x26>
 800342c:	230c      	movs	r3, #12
 800342e:	6033      	str	r3, [r6, #0]
 8003430:	2000      	movs	r0, #0
 8003432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003436:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800350c <_malloc_r+0xfc>
 800343a:	f000 f869 	bl	8003510 <__malloc_lock>
 800343e:	f8d8 3000 	ldr.w	r3, [r8]
 8003442:	461c      	mov	r4, r3
 8003444:	bb44      	cbnz	r4, 8003498 <_malloc_r+0x88>
 8003446:	4629      	mov	r1, r5
 8003448:	4630      	mov	r0, r6
 800344a:	f7ff ffbf 	bl	80033cc <sbrk_aligned>
 800344e:	1c43      	adds	r3, r0, #1
 8003450:	4604      	mov	r4, r0
 8003452:	d158      	bne.n	8003506 <_malloc_r+0xf6>
 8003454:	f8d8 4000 	ldr.w	r4, [r8]
 8003458:	4627      	mov	r7, r4
 800345a:	2f00      	cmp	r7, #0
 800345c:	d143      	bne.n	80034e6 <_malloc_r+0xd6>
 800345e:	2c00      	cmp	r4, #0
 8003460:	d04b      	beq.n	80034fa <_malloc_r+0xea>
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	4639      	mov	r1, r7
 8003466:	4630      	mov	r0, r6
 8003468:	eb04 0903 	add.w	r9, r4, r3
 800346c:	f000 fc5c 	bl	8003d28 <_sbrk_r>
 8003470:	4581      	cmp	r9, r0
 8003472:	d142      	bne.n	80034fa <_malloc_r+0xea>
 8003474:	6821      	ldr	r1, [r4, #0]
 8003476:	1a6d      	subs	r5, r5, r1
 8003478:	4629      	mov	r1, r5
 800347a:	4630      	mov	r0, r6
 800347c:	f7ff ffa6 	bl	80033cc <sbrk_aligned>
 8003480:	3001      	adds	r0, #1
 8003482:	d03a      	beq.n	80034fa <_malloc_r+0xea>
 8003484:	6823      	ldr	r3, [r4, #0]
 8003486:	442b      	add	r3, r5
 8003488:	6023      	str	r3, [r4, #0]
 800348a:	f8d8 3000 	ldr.w	r3, [r8]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	bb62      	cbnz	r2, 80034ec <_malloc_r+0xdc>
 8003492:	f8c8 7000 	str.w	r7, [r8]
 8003496:	e00f      	b.n	80034b8 <_malloc_r+0xa8>
 8003498:	6822      	ldr	r2, [r4, #0]
 800349a:	1b52      	subs	r2, r2, r5
 800349c:	d420      	bmi.n	80034e0 <_malloc_r+0xd0>
 800349e:	2a0b      	cmp	r2, #11
 80034a0:	d917      	bls.n	80034d2 <_malloc_r+0xc2>
 80034a2:	1961      	adds	r1, r4, r5
 80034a4:	42a3      	cmp	r3, r4
 80034a6:	6025      	str	r5, [r4, #0]
 80034a8:	bf18      	it	ne
 80034aa:	6059      	strne	r1, [r3, #4]
 80034ac:	6863      	ldr	r3, [r4, #4]
 80034ae:	bf08      	it	eq
 80034b0:	f8c8 1000 	streq.w	r1, [r8]
 80034b4:	5162      	str	r2, [r4, r5]
 80034b6:	604b      	str	r3, [r1, #4]
 80034b8:	4630      	mov	r0, r6
 80034ba:	f000 f82f 	bl	800351c <__malloc_unlock>
 80034be:	f104 000b 	add.w	r0, r4, #11
 80034c2:	1d23      	adds	r3, r4, #4
 80034c4:	f020 0007 	bic.w	r0, r0, #7
 80034c8:	1ac2      	subs	r2, r0, r3
 80034ca:	bf1c      	itt	ne
 80034cc:	1a1b      	subne	r3, r3, r0
 80034ce:	50a3      	strne	r3, [r4, r2]
 80034d0:	e7af      	b.n	8003432 <_malloc_r+0x22>
 80034d2:	6862      	ldr	r2, [r4, #4]
 80034d4:	42a3      	cmp	r3, r4
 80034d6:	bf0c      	ite	eq
 80034d8:	f8c8 2000 	streq.w	r2, [r8]
 80034dc:	605a      	strne	r2, [r3, #4]
 80034de:	e7eb      	b.n	80034b8 <_malloc_r+0xa8>
 80034e0:	4623      	mov	r3, r4
 80034e2:	6864      	ldr	r4, [r4, #4]
 80034e4:	e7ae      	b.n	8003444 <_malloc_r+0x34>
 80034e6:	463c      	mov	r4, r7
 80034e8:	687f      	ldr	r7, [r7, #4]
 80034ea:	e7b6      	b.n	800345a <_malloc_r+0x4a>
 80034ec:	461a      	mov	r2, r3
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	42a3      	cmp	r3, r4
 80034f2:	d1fb      	bne.n	80034ec <_malloc_r+0xdc>
 80034f4:	2300      	movs	r3, #0
 80034f6:	6053      	str	r3, [r2, #4]
 80034f8:	e7de      	b.n	80034b8 <_malloc_r+0xa8>
 80034fa:	230c      	movs	r3, #12
 80034fc:	6033      	str	r3, [r6, #0]
 80034fe:	4630      	mov	r0, r6
 8003500:	f000 f80c 	bl	800351c <__malloc_unlock>
 8003504:	e794      	b.n	8003430 <_malloc_r+0x20>
 8003506:	6005      	str	r5, [r0, #0]
 8003508:	e7d6      	b.n	80034b8 <_malloc_r+0xa8>
 800350a:	bf00      	nop
 800350c:	2000025c 	.word	0x2000025c

08003510 <__malloc_lock>:
 8003510:	4801      	ldr	r0, [pc, #4]	@ (8003518 <__malloc_lock+0x8>)
 8003512:	f7ff bf0e 	b.w	8003332 <__retarget_lock_acquire_recursive>
 8003516:	bf00      	nop
 8003518:	20000254 	.word	0x20000254

0800351c <__malloc_unlock>:
 800351c:	4801      	ldr	r0, [pc, #4]	@ (8003524 <__malloc_unlock+0x8>)
 800351e:	f7ff bf09 	b.w	8003334 <__retarget_lock_release_recursive>
 8003522:	bf00      	nop
 8003524:	20000254 	.word	0x20000254

08003528 <__sfputc_r>:
 8003528:	6893      	ldr	r3, [r2, #8]
 800352a:	3b01      	subs	r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	b410      	push	{r4}
 8003530:	6093      	str	r3, [r2, #8]
 8003532:	da08      	bge.n	8003546 <__sfputc_r+0x1e>
 8003534:	6994      	ldr	r4, [r2, #24]
 8003536:	42a3      	cmp	r3, r4
 8003538:	db01      	blt.n	800353e <__sfputc_r+0x16>
 800353a:	290a      	cmp	r1, #10
 800353c:	d103      	bne.n	8003546 <__sfputc_r+0x1e>
 800353e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003542:	f7ff bde8 	b.w	8003116 <__swbuf_r>
 8003546:	6813      	ldr	r3, [r2, #0]
 8003548:	1c58      	adds	r0, r3, #1
 800354a:	6010      	str	r0, [r2, #0]
 800354c:	7019      	strb	r1, [r3, #0]
 800354e:	4608      	mov	r0, r1
 8003550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003554:	4770      	bx	lr

08003556 <__sfputs_r>:
 8003556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003558:	4606      	mov	r6, r0
 800355a:	460f      	mov	r7, r1
 800355c:	4614      	mov	r4, r2
 800355e:	18d5      	adds	r5, r2, r3
 8003560:	42ac      	cmp	r4, r5
 8003562:	d101      	bne.n	8003568 <__sfputs_r+0x12>
 8003564:	2000      	movs	r0, #0
 8003566:	e007      	b.n	8003578 <__sfputs_r+0x22>
 8003568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800356c:	463a      	mov	r2, r7
 800356e:	4630      	mov	r0, r6
 8003570:	f7ff ffda 	bl	8003528 <__sfputc_r>
 8003574:	1c43      	adds	r3, r0, #1
 8003576:	d1f3      	bne.n	8003560 <__sfputs_r+0xa>
 8003578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800357c <_vfiprintf_r>:
 800357c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003580:	460d      	mov	r5, r1
 8003582:	b09d      	sub	sp, #116	@ 0x74
 8003584:	4614      	mov	r4, r2
 8003586:	4698      	mov	r8, r3
 8003588:	4606      	mov	r6, r0
 800358a:	b118      	cbz	r0, 8003594 <_vfiprintf_r+0x18>
 800358c:	6a03      	ldr	r3, [r0, #32]
 800358e:	b90b      	cbnz	r3, 8003594 <_vfiprintf_r+0x18>
 8003590:	f7ff fcd8 	bl	8002f44 <__sinit>
 8003594:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003596:	07d9      	lsls	r1, r3, #31
 8003598:	d405      	bmi.n	80035a6 <_vfiprintf_r+0x2a>
 800359a:	89ab      	ldrh	r3, [r5, #12]
 800359c:	059a      	lsls	r2, r3, #22
 800359e:	d402      	bmi.n	80035a6 <_vfiprintf_r+0x2a>
 80035a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80035a2:	f7ff fec6 	bl	8003332 <__retarget_lock_acquire_recursive>
 80035a6:	89ab      	ldrh	r3, [r5, #12]
 80035a8:	071b      	lsls	r3, r3, #28
 80035aa:	d501      	bpl.n	80035b0 <_vfiprintf_r+0x34>
 80035ac:	692b      	ldr	r3, [r5, #16]
 80035ae:	b99b      	cbnz	r3, 80035d8 <_vfiprintf_r+0x5c>
 80035b0:	4629      	mov	r1, r5
 80035b2:	4630      	mov	r0, r6
 80035b4:	f7ff fdee 	bl	8003194 <__swsetup_r>
 80035b8:	b170      	cbz	r0, 80035d8 <_vfiprintf_r+0x5c>
 80035ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80035bc:	07dc      	lsls	r4, r3, #31
 80035be:	d504      	bpl.n	80035ca <_vfiprintf_r+0x4e>
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
 80035c4:	b01d      	add	sp, #116	@ 0x74
 80035c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035ca:	89ab      	ldrh	r3, [r5, #12]
 80035cc:	0598      	lsls	r0, r3, #22
 80035ce:	d4f7      	bmi.n	80035c0 <_vfiprintf_r+0x44>
 80035d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80035d2:	f7ff feaf 	bl	8003334 <__retarget_lock_release_recursive>
 80035d6:	e7f3      	b.n	80035c0 <_vfiprintf_r+0x44>
 80035d8:	2300      	movs	r3, #0
 80035da:	9309      	str	r3, [sp, #36]	@ 0x24
 80035dc:	2320      	movs	r3, #32
 80035de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80035e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80035e6:	2330      	movs	r3, #48	@ 0x30
 80035e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003798 <_vfiprintf_r+0x21c>
 80035ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80035f0:	f04f 0901 	mov.w	r9, #1
 80035f4:	4623      	mov	r3, r4
 80035f6:	469a      	mov	sl, r3
 80035f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035fc:	b10a      	cbz	r2, 8003602 <_vfiprintf_r+0x86>
 80035fe:	2a25      	cmp	r2, #37	@ 0x25
 8003600:	d1f9      	bne.n	80035f6 <_vfiprintf_r+0x7a>
 8003602:	ebba 0b04 	subs.w	fp, sl, r4
 8003606:	d00b      	beq.n	8003620 <_vfiprintf_r+0xa4>
 8003608:	465b      	mov	r3, fp
 800360a:	4622      	mov	r2, r4
 800360c:	4629      	mov	r1, r5
 800360e:	4630      	mov	r0, r6
 8003610:	f7ff ffa1 	bl	8003556 <__sfputs_r>
 8003614:	3001      	adds	r0, #1
 8003616:	f000 80a7 	beq.w	8003768 <_vfiprintf_r+0x1ec>
 800361a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800361c:	445a      	add	r2, fp
 800361e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003620:	f89a 3000 	ldrb.w	r3, [sl]
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 809f 	beq.w	8003768 <_vfiprintf_r+0x1ec>
 800362a:	2300      	movs	r3, #0
 800362c:	f04f 32ff 	mov.w	r2, #4294967295
 8003630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003634:	f10a 0a01 	add.w	sl, sl, #1
 8003638:	9304      	str	r3, [sp, #16]
 800363a:	9307      	str	r3, [sp, #28]
 800363c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003640:	931a      	str	r3, [sp, #104]	@ 0x68
 8003642:	4654      	mov	r4, sl
 8003644:	2205      	movs	r2, #5
 8003646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800364a:	4853      	ldr	r0, [pc, #332]	@ (8003798 <_vfiprintf_r+0x21c>)
 800364c:	f7fc fdf8 	bl	8000240 <memchr>
 8003650:	9a04      	ldr	r2, [sp, #16]
 8003652:	b9d8      	cbnz	r0, 800368c <_vfiprintf_r+0x110>
 8003654:	06d1      	lsls	r1, r2, #27
 8003656:	bf44      	itt	mi
 8003658:	2320      	movmi	r3, #32
 800365a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800365e:	0713      	lsls	r3, r2, #28
 8003660:	bf44      	itt	mi
 8003662:	232b      	movmi	r3, #43	@ 0x2b
 8003664:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003668:	f89a 3000 	ldrb.w	r3, [sl]
 800366c:	2b2a      	cmp	r3, #42	@ 0x2a
 800366e:	d015      	beq.n	800369c <_vfiprintf_r+0x120>
 8003670:	9a07      	ldr	r2, [sp, #28]
 8003672:	4654      	mov	r4, sl
 8003674:	2000      	movs	r0, #0
 8003676:	f04f 0c0a 	mov.w	ip, #10
 800367a:	4621      	mov	r1, r4
 800367c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003680:	3b30      	subs	r3, #48	@ 0x30
 8003682:	2b09      	cmp	r3, #9
 8003684:	d94b      	bls.n	800371e <_vfiprintf_r+0x1a2>
 8003686:	b1b0      	cbz	r0, 80036b6 <_vfiprintf_r+0x13a>
 8003688:	9207      	str	r2, [sp, #28]
 800368a:	e014      	b.n	80036b6 <_vfiprintf_r+0x13a>
 800368c:	eba0 0308 	sub.w	r3, r0, r8
 8003690:	fa09 f303 	lsl.w	r3, r9, r3
 8003694:	4313      	orrs	r3, r2
 8003696:	9304      	str	r3, [sp, #16]
 8003698:	46a2      	mov	sl, r4
 800369a:	e7d2      	b.n	8003642 <_vfiprintf_r+0xc6>
 800369c:	9b03      	ldr	r3, [sp, #12]
 800369e:	1d19      	adds	r1, r3, #4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	9103      	str	r1, [sp, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bfbb      	ittet	lt
 80036a8:	425b      	neglt	r3, r3
 80036aa:	f042 0202 	orrlt.w	r2, r2, #2
 80036ae:	9307      	strge	r3, [sp, #28]
 80036b0:	9307      	strlt	r3, [sp, #28]
 80036b2:	bfb8      	it	lt
 80036b4:	9204      	strlt	r2, [sp, #16]
 80036b6:	7823      	ldrb	r3, [r4, #0]
 80036b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80036ba:	d10a      	bne.n	80036d2 <_vfiprintf_r+0x156>
 80036bc:	7863      	ldrb	r3, [r4, #1]
 80036be:	2b2a      	cmp	r3, #42	@ 0x2a
 80036c0:	d132      	bne.n	8003728 <_vfiprintf_r+0x1ac>
 80036c2:	9b03      	ldr	r3, [sp, #12]
 80036c4:	1d1a      	adds	r2, r3, #4
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	9203      	str	r2, [sp, #12]
 80036ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036ce:	3402      	adds	r4, #2
 80036d0:	9305      	str	r3, [sp, #20]
 80036d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80037a8 <_vfiprintf_r+0x22c>
 80036d6:	7821      	ldrb	r1, [r4, #0]
 80036d8:	2203      	movs	r2, #3
 80036da:	4650      	mov	r0, sl
 80036dc:	f7fc fdb0 	bl	8000240 <memchr>
 80036e0:	b138      	cbz	r0, 80036f2 <_vfiprintf_r+0x176>
 80036e2:	9b04      	ldr	r3, [sp, #16]
 80036e4:	eba0 000a 	sub.w	r0, r0, sl
 80036e8:	2240      	movs	r2, #64	@ 0x40
 80036ea:	4082      	lsls	r2, r0
 80036ec:	4313      	orrs	r3, r2
 80036ee:	3401      	adds	r4, #1
 80036f0:	9304      	str	r3, [sp, #16]
 80036f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036f6:	4829      	ldr	r0, [pc, #164]	@ (800379c <_vfiprintf_r+0x220>)
 80036f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80036fc:	2206      	movs	r2, #6
 80036fe:	f7fc fd9f 	bl	8000240 <memchr>
 8003702:	2800      	cmp	r0, #0
 8003704:	d03f      	beq.n	8003786 <_vfiprintf_r+0x20a>
 8003706:	4b26      	ldr	r3, [pc, #152]	@ (80037a0 <_vfiprintf_r+0x224>)
 8003708:	bb1b      	cbnz	r3, 8003752 <_vfiprintf_r+0x1d6>
 800370a:	9b03      	ldr	r3, [sp, #12]
 800370c:	3307      	adds	r3, #7
 800370e:	f023 0307 	bic.w	r3, r3, #7
 8003712:	3308      	adds	r3, #8
 8003714:	9303      	str	r3, [sp, #12]
 8003716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003718:	443b      	add	r3, r7
 800371a:	9309      	str	r3, [sp, #36]	@ 0x24
 800371c:	e76a      	b.n	80035f4 <_vfiprintf_r+0x78>
 800371e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003722:	460c      	mov	r4, r1
 8003724:	2001      	movs	r0, #1
 8003726:	e7a8      	b.n	800367a <_vfiprintf_r+0xfe>
 8003728:	2300      	movs	r3, #0
 800372a:	3401      	adds	r4, #1
 800372c:	9305      	str	r3, [sp, #20]
 800372e:	4619      	mov	r1, r3
 8003730:	f04f 0c0a 	mov.w	ip, #10
 8003734:	4620      	mov	r0, r4
 8003736:	f810 2b01 	ldrb.w	r2, [r0], #1
 800373a:	3a30      	subs	r2, #48	@ 0x30
 800373c:	2a09      	cmp	r2, #9
 800373e:	d903      	bls.n	8003748 <_vfiprintf_r+0x1cc>
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0c6      	beq.n	80036d2 <_vfiprintf_r+0x156>
 8003744:	9105      	str	r1, [sp, #20]
 8003746:	e7c4      	b.n	80036d2 <_vfiprintf_r+0x156>
 8003748:	fb0c 2101 	mla	r1, ip, r1, r2
 800374c:	4604      	mov	r4, r0
 800374e:	2301      	movs	r3, #1
 8003750:	e7f0      	b.n	8003734 <_vfiprintf_r+0x1b8>
 8003752:	ab03      	add	r3, sp, #12
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	462a      	mov	r2, r5
 8003758:	4b12      	ldr	r3, [pc, #72]	@ (80037a4 <_vfiprintf_r+0x228>)
 800375a:	a904      	add	r1, sp, #16
 800375c:	4630      	mov	r0, r6
 800375e:	f3af 8000 	nop.w
 8003762:	4607      	mov	r7, r0
 8003764:	1c78      	adds	r0, r7, #1
 8003766:	d1d6      	bne.n	8003716 <_vfiprintf_r+0x19a>
 8003768:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800376a:	07d9      	lsls	r1, r3, #31
 800376c:	d405      	bmi.n	800377a <_vfiprintf_r+0x1fe>
 800376e:	89ab      	ldrh	r3, [r5, #12]
 8003770:	059a      	lsls	r2, r3, #22
 8003772:	d402      	bmi.n	800377a <_vfiprintf_r+0x1fe>
 8003774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003776:	f7ff fddd 	bl	8003334 <__retarget_lock_release_recursive>
 800377a:	89ab      	ldrh	r3, [r5, #12]
 800377c:	065b      	lsls	r3, r3, #25
 800377e:	f53f af1f 	bmi.w	80035c0 <_vfiprintf_r+0x44>
 8003782:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003784:	e71e      	b.n	80035c4 <_vfiprintf_r+0x48>
 8003786:	ab03      	add	r3, sp, #12
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	462a      	mov	r2, r5
 800378c:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <_vfiprintf_r+0x228>)
 800378e:	a904      	add	r1, sp, #16
 8003790:	4630      	mov	r0, r6
 8003792:	f000 f879 	bl	8003888 <_printf_i>
 8003796:	e7e4      	b.n	8003762 <_vfiprintf_r+0x1e6>
 8003798:	08003db0 	.word	0x08003db0
 800379c:	08003dba 	.word	0x08003dba
 80037a0:	00000000 	.word	0x00000000
 80037a4:	08003557 	.word	0x08003557
 80037a8:	08003db6 	.word	0x08003db6

080037ac <_printf_common>:
 80037ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037b0:	4616      	mov	r6, r2
 80037b2:	4698      	mov	r8, r3
 80037b4:	688a      	ldr	r2, [r1, #8]
 80037b6:	690b      	ldr	r3, [r1, #16]
 80037b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037bc:	4293      	cmp	r3, r2
 80037be:	bfb8      	it	lt
 80037c0:	4613      	movlt	r3, r2
 80037c2:	6033      	str	r3, [r6, #0]
 80037c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80037c8:	4607      	mov	r7, r0
 80037ca:	460c      	mov	r4, r1
 80037cc:	b10a      	cbz	r2, 80037d2 <_printf_common+0x26>
 80037ce:	3301      	adds	r3, #1
 80037d0:	6033      	str	r3, [r6, #0]
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	0699      	lsls	r1, r3, #26
 80037d6:	bf42      	ittt	mi
 80037d8:	6833      	ldrmi	r3, [r6, #0]
 80037da:	3302      	addmi	r3, #2
 80037dc:	6033      	strmi	r3, [r6, #0]
 80037de:	6825      	ldr	r5, [r4, #0]
 80037e0:	f015 0506 	ands.w	r5, r5, #6
 80037e4:	d106      	bne.n	80037f4 <_printf_common+0x48>
 80037e6:	f104 0a19 	add.w	sl, r4, #25
 80037ea:	68e3      	ldr	r3, [r4, #12]
 80037ec:	6832      	ldr	r2, [r6, #0]
 80037ee:	1a9b      	subs	r3, r3, r2
 80037f0:	42ab      	cmp	r3, r5
 80037f2:	dc26      	bgt.n	8003842 <_printf_common+0x96>
 80037f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80037f8:	6822      	ldr	r2, [r4, #0]
 80037fa:	3b00      	subs	r3, #0
 80037fc:	bf18      	it	ne
 80037fe:	2301      	movne	r3, #1
 8003800:	0692      	lsls	r2, r2, #26
 8003802:	d42b      	bmi.n	800385c <_printf_common+0xb0>
 8003804:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003808:	4641      	mov	r1, r8
 800380a:	4638      	mov	r0, r7
 800380c:	47c8      	blx	r9
 800380e:	3001      	adds	r0, #1
 8003810:	d01e      	beq.n	8003850 <_printf_common+0xa4>
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	6922      	ldr	r2, [r4, #16]
 8003816:	f003 0306 	and.w	r3, r3, #6
 800381a:	2b04      	cmp	r3, #4
 800381c:	bf02      	ittt	eq
 800381e:	68e5      	ldreq	r5, [r4, #12]
 8003820:	6833      	ldreq	r3, [r6, #0]
 8003822:	1aed      	subeq	r5, r5, r3
 8003824:	68a3      	ldr	r3, [r4, #8]
 8003826:	bf0c      	ite	eq
 8003828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800382c:	2500      	movne	r5, #0
 800382e:	4293      	cmp	r3, r2
 8003830:	bfc4      	itt	gt
 8003832:	1a9b      	subgt	r3, r3, r2
 8003834:	18ed      	addgt	r5, r5, r3
 8003836:	2600      	movs	r6, #0
 8003838:	341a      	adds	r4, #26
 800383a:	42b5      	cmp	r5, r6
 800383c:	d11a      	bne.n	8003874 <_printf_common+0xc8>
 800383e:	2000      	movs	r0, #0
 8003840:	e008      	b.n	8003854 <_printf_common+0xa8>
 8003842:	2301      	movs	r3, #1
 8003844:	4652      	mov	r2, sl
 8003846:	4641      	mov	r1, r8
 8003848:	4638      	mov	r0, r7
 800384a:	47c8      	blx	r9
 800384c:	3001      	adds	r0, #1
 800384e:	d103      	bne.n	8003858 <_printf_common+0xac>
 8003850:	f04f 30ff 	mov.w	r0, #4294967295
 8003854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003858:	3501      	adds	r5, #1
 800385a:	e7c6      	b.n	80037ea <_printf_common+0x3e>
 800385c:	18e1      	adds	r1, r4, r3
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	2030      	movs	r0, #48	@ 0x30
 8003862:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003866:	4422      	add	r2, r4
 8003868:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800386c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003870:	3302      	adds	r3, #2
 8003872:	e7c7      	b.n	8003804 <_printf_common+0x58>
 8003874:	2301      	movs	r3, #1
 8003876:	4622      	mov	r2, r4
 8003878:	4641      	mov	r1, r8
 800387a:	4638      	mov	r0, r7
 800387c:	47c8      	blx	r9
 800387e:	3001      	adds	r0, #1
 8003880:	d0e6      	beq.n	8003850 <_printf_common+0xa4>
 8003882:	3601      	adds	r6, #1
 8003884:	e7d9      	b.n	800383a <_printf_common+0x8e>
	...

08003888 <_printf_i>:
 8003888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800388c:	7e0f      	ldrb	r7, [r1, #24]
 800388e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003890:	2f78      	cmp	r7, #120	@ 0x78
 8003892:	4691      	mov	r9, r2
 8003894:	4680      	mov	r8, r0
 8003896:	460c      	mov	r4, r1
 8003898:	469a      	mov	sl, r3
 800389a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800389e:	d807      	bhi.n	80038b0 <_printf_i+0x28>
 80038a0:	2f62      	cmp	r7, #98	@ 0x62
 80038a2:	d80a      	bhi.n	80038ba <_printf_i+0x32>
 80038a4:	2f00      	cmp	r7, #0
 80038a6:	f000 80d2 	beq.w	8003a4e <_printf_i+0x1c6>
 80038aa:	2f58      	cmp	r7, #88	@ 0x58
 80038ac:	f000 80b9 	beq.w	8003a22 <_printf_i+0x19a>
 80038b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80038b8:	e03a      	b.n	8003930 <_printf_i+0xa8>
 80038ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80038be:	2b15      	cmp	r3, #21
 80038c0:	d8f6      	bhi.n	80038b0 <_printf_i+0x28>
 80038c2:	a101      	add	r1, pc, #4	@ (adr r1, 80038c8 <_printf_i+0x40>)
 80038c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038c8:	08003921 	.word	0x08003921
 80038cc:	08003935 	.word	0x08003935
 80038d0:	080038b1 	.word	0x080038b1
 80038d4:	080038b1 	.word	0x080038b1
 80038d8:	080038b1 	.word	0x080038b1
 80038dc:	080038b1 	.word	0x080038b1
 80038e0:	08003935 	.word	0x08003935
 80038e4:	080038b1 	.word	0x080038b1
 80038e8:	080038b1 	.word	0x080038b1
 80038ec:	080038b1 	.word	0x080038b1
 80038f0:	080038b1 	.word	0x080038b1
 80038f4:	08003a35 	.word	0x08003a35
 80038f8:	0800395f 	.word	0x0800395f
 80038fc:	080039ef 	.word	0x080039ef
 8003900:	080038b1 	.word	0x080038b1
 8003904:	080038b1 	.word	0x080038b1
 8003908:	08003a57 	.word	0x08003a57
 800390c:	080038b1 	.word	0x080038b1
 8003910:	0800395f 	.word	0x0800395f
 8003914:	080038b1 	.word	0x080038b1
 8003918:	080038b1 	.word	0x080038b1
 800391c:	080039f7 	.word	0x080039f7
 8003920:	6833      	ldr	r3, [r6, #0]
 8003922:	1d1a      	adds	r2, r3, #4
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6032      	str	r2, [r6, #0]
 8003928:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800392c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003930:	2301      	movs	r3, #1
 8003932:	e09d      	b.n	8003a70 <_printf_i+0x1e8>
 8003934:	6833      	ldr	r3, [r6, #0]
 8003936:	6820      	ldr	r0, [r4, #0]
 8003938:	1d19      	adds	r1, r3, #4
 800393a:	6031      	str	r1, [r6, #0]
 800393c:	0606      	lsls	r6, r0, #24
 800393e:	d501      	bpl.n	8003944 <_printf_i+0xbc>
 8003940:	681d      	ldr	r5, [r3, #0]
 8003942:	e003      	b.n	800394c <_printf_i+0xc4>
 8003944:	0645      	lsls	r5, r0, #25
 8003946:	d5fb      	bpl.n	8003940 <_printf_i+0xb8>
 8003948:	f9b3 5000 	ldrsh.w	r5, [r3]
 800394c:	2d00      	cmp	r5, #0
 800394e:	da03      	bge.n	8003958 <_printf_i+0xd0>
 8003950:	232d      	movs	r3, #45	@ 0x2d
 8003952:	426d      	negs	r5, r5
 8003954:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003958:	4859      	ldr	r0, [pc, #356]	@ (8003ac0 <_printf_i+0x238>)
 800395a:	230a      	movs	r3, #10
 800395c:	e011      	b.n	8003982 <_printf_i+0xfa>
 800395e:	6821      	ldr	r1, [r4, #0]
 8003960:	6833      	ldr	r3, [r6, #0]
 8003962:	0608      	lsls	r0, r1, #24
 8003964:	f853 5b04 	ldr.w	r5, [r3], #4
 8003968:	d402      	bmi.n	8003970 <_printf_i+0xe8>
 800396a:	0649      	lsls	r1, r1, #25
 800396c:	bf48      	it	mi
 800396e:	b2ad      	uxthmi	r5, r5
 8003970:	2f6f      	cmp	r7, #111	@ 0x6f
 8003972:	4853      	ldr	r0, [pc, #332]	@ (8003ac0 <_printf_i+0x238>)
 8003974:	6033      	str	r3, [r6, #0]
 8003976:	bf14      	ite	ne
 8003978:	230a      	movne	r3, #10
 800397a:	2308      	moveq	r3, #8
 800397c:	2100      	movs	r1, #0
 800397e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003982:	6866      	ldr	r6, [r4, #4]
 8003984:	60a6      	str	r6, [r4, #8]
 8003986:	2e00      	cmp	r6, #0
 8003988:	bfa2      	ittt	ge
 800398a:	6821      	ldrge	r1, [r4, #0]
 800398c:	f021 0104 	bicge.w	r1, r1, #4
 8003990:	6021      	strge	r1, [r4, #0]
 8003992:	b90d      	cbnz	r5, 8003998 <_printf_i+0x110>
 8003994:	2e00      	cmp	r6, #0
 8003996:	d04b      	beq.n	8003a30 <_printf_i+0x1a8>
 8003998:	4616      	mov	r6, r2
 800399a:	fbb5 f1f3 	udiv	r1, r5, r3
 800399e:	fb03 5711 	mls	r7, r3, r1, r5
 80039a2:	5dc7      	ldrb	r7, [r0, r7]
 80039a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039a8:	462f      	mov	r7, r5
 80039aa:	42bb      	cmp	r3, r7
 80039ac:	460d      	mov	r5, r1
 80039ae:	d9f4      	bls.n	800399a <_printf_i+0x112>
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d10b      	bne.n	80039cc <_printf_i+0x144>
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	07df      	lsls	r7, r3, #31
 80039b8:	d508      	bpl.n	80039cc <_printf_i+0x144>
 80039ba:	6923      	ldr	r3, [r4, #16]
 80039bc:	6861      	ldr	r1, [r4, #4]
 80039be:	4299      	cmp	r1, r3
 80039c0:	bfde      	ittt	le
 80039c2:	2330      	movle	r3, #48	@ 0x30
 80039c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039cc:	1b92      	subs	r2, r2, r6
 80039ce:	6122      	str	r2, [r4, #16]
 80039d0:	f8cd a000 	str.w	sl, [sp]
 80039d4:	464b      	mov	r3, r9
 80039d6:	aa03      	add	r2, sp, #12
 80039d8:	4621      	mov	r1, r4
 80039da:	4640      	mov	r0, r8
 80039dc:	f7ff fee6 	bl	80037ac <_printf_common>
 80039e0:	3001      	adds	r0, #1
 80039e2:	d14a      	bne.n	8003a7a <_printf_i+0x1f2>
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295
 80039e8:	b004      	add	sp, #16
 80039ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	f043 0320 	orr.w	r3, r3, #32
 80039f4:	6023      	str	r3, [r4, #0]
 80039f6:	4833      	ldr	r0, [pc, #204]	@ (8003ac4 <_printf_i+0x23c>)
 80039f8:	2778      	movs	r7, #120	@ 0x78
 80039fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	6831      	ldr	r1, [r6, #0]
 8003a02:	061f      	lsls	r7, r3, #24
 8003a04:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a08:	d402      	bmi.n	8003a10 <_printf_i+0x188>
 8003a0a:	065f      	lsls	r7, r3, #25
 8003a0c:	bf48      	it	mi
 8003a0e:	b2ad      	uxthmi	r5, r5
 8003a10:	6031      	str	r1, [r6, #0]
 8003a12:	07d9      	lsls	r1, r3, #31
 8003a14:	bf44      	itt	mi
 8003a16:	f043 0320 	orrmi.w	r3, r3, #32
 8003a1a:	6023      	strmi	r3, [r4, #0]
 8003a1c:	b11d      	cbz	r5, 8003a26 <_printf_i+0x19e>
 8003a1e:	2310      	movs	r3, #16
 8003a20:	e7ac      	b.n	800397c <_printf_i+0xf4>
 8003a22:	4827      	ldr	r0, [pc, #156]	@ (8003ac0 <_printf_i+0x238>)
 8003a24:	e7e9      	b.n	80039fa <_printf_i+0x172>
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	f023 0320 	bic.w	r3, r3, #32
 8003a2c:	6023      	str	r3, [r4, #0]
 8003a2e:	e7f6      	b.n	8003a1e <_printf_i+0x196>
 8003a30:	4616      	mov	r6, r2
 8003a32:	e7bd      	b.n	80039b0 <_printf_i+0x128>
 8003a34:	6833      	ldr	r3, [r6, #0]
 8003a36:	6825      	ldr	r5, [r4, #0]
 8003a38:	6961      	ldr	r1, [r4, #20]
 8003a3a:	1d18      	adds	r0, r3, #4
 8003a3c:	6030      	str	r0, [r6, #0]
 8003a3e:	062e      	lsls	r6, r5, #24
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	d501      	bpl.n	8003a48 <_printf_i+0x1c0>
 8003a44:	6019      	str	r1, [r3, #0]
 8003a46:	e002      	b.n	8003a4e <_printf_i+0x1c6>
 8003a48:	0668      	lsls	r0, r5, #25
 8003a4a:	d5fb      	bpl.n	8003a44 <_printf_i+0x1bc>
 8003a4c:	8019      	strh	r1, [r3, #0]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	6123      	str	r3, [r4, #16]
 8003a52:	4616      	mov	r6, r2
 8003a54:	e7bc      	b.n	80039d0 <_printf_i+0x148>
 8003a56:	6833      	ldr	r3, [r6, #0]
 8003a58:	1d1a      	adds	r2, r3, #4
 8003a5a:	6032      	str	r2, [r6, #0]
 8003a5c:	681e      	ldr	r6, [r3, #0]
 8003a5e:	6862      	ldr	r2, [r4, #4]
 8003a60:	2100      	movs	r1, #0
 8003a62:	4630      	mov	r0, r6
 8003a64:	f7fc fbec 	bl	8000240 <memchr>
 8003a68:	b108      	cbz	r0, 8003a6e <_printf_i+0x1e6>
 8003a6a:	1b80      	subs	r0, r0, r6
 8003a6c:	6060      	str	r0, [r4, #4]
 8003a6e:	6863      	ldr	r3, [r4, #4]
 8003a70:	6123      	str	r3, [r4, #16]
 8003a72:	2300      	movs	r3, #0
 8003a74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a78:	e7aa      	b.n	80039d0 <_printf_i+0x148>
 8003a7a:	6923      	ldr	r3, [r4, #16]
 8003a7c:	4632      	mov	r2, r6
 8003a7e:	4649      	mov	r1, r9
 8003a80:	4640      	mov	r0, r8
 8003a82:	47d0      	blx	sl
 8003a84:	3001      	adds	r0, #1
 8003a86:	d0ad      	beq.n	80039e4 <_printf_i+0x15c>
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	079b      	lsls	r3, r3, #30
 8003a8c:	d413      	bmi.n	8003ab6 <_printf_i+0x22e>
 8003a8e:	68e0      	ldr	r0, [r4, #12]
 8003a90:	9b03      	ldr	r3, [sp, #12]
 8003a92:	4298      	cmp	r0, r3
 8003a94:	bfb8      	it	lt
 8003a96:	4618      	movlt	r0, r3
 8003a98:	e7a6      	b.n	80039e8 <_printf_i+0x160>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	4632      	mov	r2, r6
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	4640      	mov	r0, r8
 8003aa2:	47d0      	blx	sl
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	d09d      	beq.n	80039e4 <_printf_i+0x15c>
 8003aa8:	3501      	adds	r5, #1
 8003aaa:	68e3      	ldr	r3, [r4, #12]
 8003aac:	9903      	ldr	r1, [sp, #12]
 8003aae:	1a5b      	subs	r3, r3, r1
 8003ab0:	42ab      	cmp	r3, r5
 8003ab2:	dcf2      	bgt.n	8003a9a <_printf_i+0x212>
 8003ab4:	e7eb      	b.n	8003a8e <_printf_i+0x206>
 8003ab6:	2500      	movs	r5, #0
 8003ab8:	f104 0619 	add.w	r6, r4, #25
 8003abc:	e7f5      	b.n	8003aaa <_printf_i+0x222>
 8003abe:	bf00      	nop
 8003ac0:	08003dc1 	.word	0x08003dc1
 8003ac4:	08003dd2 	.word	0x08003dd2

08003ac8 <__sflush_r>:
 8003ac8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ad0:	0716      	lsls	r6, r2, #28
 8003ad2:	4605      	mov	r5, r0
 8003ad4:	460c      	mov	r4, r1
 8003ad6:	d454      	bmi.n	8003b82 <__sflush_r+0xba>
 8003ad8:	684b      	ldr	r3, [r1, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	dc02      	bgt.n	8003ae4 <__sflush_r+0x1c>
 8003ade:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	dd48      	ble.n	8003b76 <__sflush_r+0xae>
 8003ae4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ae6:	2e00      	cmp	r6, #0
 8003ae8:	d045      	beq.n	8003b76 <__sflush_r+0xae>
 8003aea:	2300      	movs	r3, #0
 8003aec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003af0:	682f      	ldr	r7, [r5, #0]
 8003af2:	6a21      	ldr	r1, [r4, #32]
 8003af4:	602b      	str	r3, [r5, #0]
 8003af6:	d030      	beq.n	8003b5a <__sflush_r+0x92>
 8003af8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003afa:	89a3      	ldrh	r3, [r4, #12]
 8003afc:	0759      	lsls	r1, r3, #29
 8003afe:	d505      	bpl.n	8003b0c <__sflush_r+0x44>
 8003b00:	6863      	ldr	r3, [r4, #4]
 8003b02:	1ad2      	subs	r2, r2, r3
 8003b04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003b06:	b10b      	cbz	r3, 8003b0c <__sflush_r+0x44>
 8003b08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b0a:	1ad2      	subs	r2, r2, r3
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b10:	6a21      	ldr	r1, [r4, #32]
 8003b12:	4628      	mov	r0, r5
 8003b14:	47b0      	blx	r6
 8003b16:	1c43      	adds	r3, r0, #1
 8003b18:	89a3      	ldrh	r3, [r4, #12]
 8003b1a:	d106      	bne.n	8003b2a <__sflush_r+0x62>
 8003b1c:	6829      	ldr	r1, [r5, #0]
 8003b1e:	291d      	cmp	r1, #29
 8003b20:	d82b      	bhi.n	8003b7a <__sflush_r+0xb2>
 8003b22:	4a2a      	ldr	r2, [pc, #168]	@ (8003bcc <__sflush_r+0x104>)
 8003b24:	410a      	asrs	r2, r1
 8003b26:	07d6      	lsls	r6, r2, #31
 8003b28:	d427      	bmi.n	8003b7a <__sflush_r+0xb2>
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	6062      	str	r2, [r4, #4]
 8003b2e:	04d9      	lsls	r1, r3, #19
 8003b30:	6922      	ldr	r2, [r4, #16]
 8003b32:	6022      	str	r2, [r4, #0]
 8003b34:	d504      	bpl.n	8003b40 <__sflush_r+0x78>
 8003b36:	1c42      	adds	r2, r0, #1
 8003b38:	d101      	bne.n	8003b3e <__sflush_r+0x76>
 8003b3a:	682b      	ldr	r3, [r5, #0]
 8003b3c:	b903      	cbnz	r3, 8003b40 <__sflush_r+0x78>
 8003b3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003b40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b42:	602f      	str	r7, [r5, #0]
 8003b44:	b1b9      	cbz	r1, 8003b76 <__sflush_r+0xae>
 8003b46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b4a:	4299      	cmp	r1, r3
 8003b4c:	d002      	beq.n	8003b54 <__sflush_r+0x8c>
 8003b4e:	4628      	mov	r0, r5
 8003b50:	f7ff fbf2 	bl	8003338 <_free_r>
 8003b54:	2300      	movs	r3, #0
 8003b56:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b58:	e00d      	b.n	8003b76 <__sflush_r+0xae>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	47b0      	blx	r6
 8003b60:	4602      	mov	r2, r0
 8003b62:	1c50      	adds	r0, r2, #1
 8003b64:	d1c9      	bne.n	8003afa <__sflush_r+0x32>
 8003b66:	682b      	ldr	r3, [r5, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0c6      	beq.n	8003afa <__sflush_r+0x32>
 8003b6c:	2b1d      	cmp	r3, #29
 8003b6e:	d001      	beq.n	8003b74 <__sflush_r+0xac>
 8003b70:	2b16      	cmp	r3, #22
 8003b72:	d11e      	bne.n	8003bb2 <__sflush_r+0xea>
 8003b74:	602f      	str	r7, [r5, #0]
 8003b76:	2000      	movs	r0, #0
 8003b78:	e022      	b.n	8003bc0 <__sflush_r+0xf8>
 8003b7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b7e:	b21b      	sxth	r3, r3
 8003b80:	e01b      	b.n	8003bba <__sflush_r+0xf2>
 8003b82:	690f      	ldr	r7, [r1, #16]
 8003b84:	2f00      	cmp	r7, #0
 8003b86:	d0f6      	beq.n	8003b76 <__sflush_r+0xae>
 8003b88:	0793      	lsls	r3, r2, #30
 8003b8a:	680e      	ldr	r6, [r1, #0]
 8003b8c:	bf08      	it	eq
 8003b8e:	694b      	ldreq	r3, [r1, #20]
 8003b90:	600f      	str	r7, [r1, #0]
 8003b92:	bf18      	it	ne
 8003b94:	2300      	movne	r3, #0
 8003b96:	eba6 0807 	sub.w	r8, r6, r7
 8003b9a:	608b      	str	r3, [r1, #8]
 8003b9c:	f1b8 0f00 	cmp.w	r8, #0
 8003ba0:	dde9      	ble.n	8003b76 <__sflush_r+0xae>
 8003ba2:	6a21      	ldr	r1, [r4, #32]
 8003ba4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003ba6:	4643      	mov	r3, r8
 8003ba8:	463a      	mov	r2, r7
 8003baa:	4628      	mov	r0, r5
 8003bac:	47b0      	blx	r6
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	dc08      	bgt.n	8003bc4 <__sflush_r+0xfc>
 8003bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bba:	81a3      	strh	r3, [r4, #12]
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bc4:	4407      	add	r7, r0
 8003bc6:	eba8 0800 	sub.w	r8, r8, r0
 8003bca:	e7e7      	b.n	8003b9c <__sflush_r+0xd4>
 8003bcc:	dfbffffe 	.word	0xdfbffffe

08003bd0 <_fflush_r>:
 8003bd0:	b538      	push	{r3, r4, r5, lr}
 8003bd2:	690b      	ldr	r3, [r1, #16]
 8003bd4:	4605      	mov	r5, r0
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	b913      	cbnz	r3, 8003be0 <_fflush_r+0x10>
 8003bda:	2500      	movs	r5, #0
 8003bdc:	4628      	mov	r0, r5
 8003bde:	bd38      	pop	{r3, r4, r5, pc}
 8003be0:	b118      	cbz	r0, 8003bea <_fflush_r+0x1a>
 8003be2:	6a03      	ldr	r3, [r0, #32]
 8003be4:	b90b      	cbnz	r3, 8003bea <_fflush_r+0x1a>
 8003be6:	f7ff f9ad 	bl	8002f44 <__sinit>
 8003bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f3      	beq.n	8003bda <_fflush_r+0xa>
 8003bf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003bf4:	07d0      	lsls	r0, r2, #31
 8003bf6:	d404      	bmi.n	8003c02 <_fflush_r+0x32>
 8003bf8:	0599      	lsls	r1, r3, #22
 8003bfa:	d402      	bmi.n	8003c02 <_fflush_r+0x32>
 8003bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003bfe:	f7ff fb98 	bl	8003332 <__retarget_lock_acquire_recursive>
 8003c02:	4628      	mov	r0, r5
 8003c04:	4621      	mov	r1, r4
 8003c06:	f7ff ff5f 	bl	8003ac8 <__sflush_r>
 8003c0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c0c:	07da      	lsls	r2, r3, #31
 8003c0e:	4605      	mov	r5, r0
 8003c10:	d4e4      	bmi.n	8003bdc <_fflush_r+0xc>
 8003c12:	89a3      	ldrh	r3, [r4, #12]
 8003c14:	059b      	lsls	r3, r3, #22
 8003c16:	d4e1      	bmi.n	8003bdc <_fflush_r+0xc>
 8003c18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c1a:	f7ff fb8b 	bl	8003334 <__retarget_lock_release_recursive>
 8003c1e:	e7dd      	b.n	8003bdc <_fflush_r+0xc>

08003c20 <__swhatbuf_r>:
 8003c20:	b570      	push	{r4, r5, r6, lr}
 8003c22:	460c      	mov	r4, r1
 8003c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c28:	2900      	cmp	r1, #0
 8003c2a:	b096      	sub	sp, #88	@ 0x58
 8003c2c:	4615      	mov	r5, r2
 8003c2e:	461e      	mov	r6, r3
 8003c30:	da0d      	bge.n	8003c4e <__swhatbuf_r+0x2e>
 8003c32:	89a3      	ldrh	r3, [r4, #12]
 8003c34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003c38:	f04f 0100 	mov.w	r1, #0
 8003c3c:	bf14      	ite	ne
 8003c3e:	2340      	movne	r3, #64	@ 0x40
 8003c40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003c44:	2000      	movs	r0, #0
 8003c46:	6031      	str	r1, [r6, #0]
 8003c48:	602b      	str	r3, [r5, #0]
 8003c4a:	b016      	add	sp, #88	@ 0x58
 8003c4c:	bd70      	pop	{r4, r5, r6, pc}
 8003c4e:	466a      	mov	r2, sp
 8003c50:	f000 f848 	bl	8003ce4 <_fstat_r>
 8003c54:	2800      	cmp	r0, #0
 8003c56:	dbec      	blt.n	8003c32 <__swhatbuf_r+0x12>
 8003c58:	9901      	ldr	r1, [sp, #4]
 8003c5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003c5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003c62:	4259      	negs	r1, r3
 8003c64:	4159      	adcs	r1, r3
 8003c66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c6a:	e7eb      	b.n	8003c44 <__swhatbuf_r+0x24>

08003c6c <__smakebuf_r>:
 8003c6c:	898b      	ldrh	r3, [r1, #12]
 8003c6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c70:	079d      	lsls	r5, r3, #30
 8003c72:	4606      	mov	r6, r0
 8003c74:	460c      	mov	r4, r1
 8003c76:	d507      	bpl.n	8003c88 <__smakebuf_r+0x1c>
 8003c78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003c7c:	6023      	str	r3, [r4, #0]
 8003c7e:	6123      	str	r3, [r4, #16]
 8003c80:	2301      	movs	r3, #1
 8003c82:	6163      	str	r3, [r4, #20]
 8003c84:	b003      	add	sp, #12
 8003c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c88:	ab01      	add	r3, sp, #4
 8003c8a:	466a      	mov	r2, sp
 8003c8c:	f7ff ffc8 	bl	8003c20 <__swhatbuf_r>
 8003c90:	9f00      	ldr	r7, [sp, #0]
 8003c92:	4605      	mov	r5, r0
 8003c94:	4639      	mov	r1, r7
 8003c96:	4630      	mov	r0, r6
 8003c98:	f7ff fbba 	bl	8003410 <_malloc_r>
 8003c9c:	b948      	cbnz	r0, 8003cb2 <__smakebuf_r+0x46>
 8003c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ca2:	059a      	lsls	r2, r3, #22
 8003ca4:	d4ee      	bmi.n	8003c84 <__smakebuf_r+0x18>
 8003ca6:	f023 0303 	bic.w	r3, r3, #3
 8003caa:	f043 0302 	orr.w	r3, r3, #2
 8003cae:	81a3      	strh	r3, [r4, #12]
 8003cb0:	e7e2      	b.n	8003c78 <__smakebuf_r+0xc>
 8003cb2:	89a3      	ldrh	r3, [r4, #12]
 8003cb4:	6020      	str	r0, [r4, #0]
 8003cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cba:	81a3      	strh	r3, [r4, #12]
 8003cbc:	9b01      	ldr	r3, [sp, #4]
 8003cbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003cc2:	b15b      	cbz	r3, 8003cdc <__smakebuf_r+0x70>
 8003cc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cc8:	4630      	mov	r0, r6
 8003cca:	f000 f81d 	bl	8003d08 <_isatty_r>
 8003cce:	b128      	cbz	r0, 8003cdc <__smakebuf_r+0x70>
 8003cd0:	89a3      	ldrh	r3, [r4, #12]
 8003cd2:	f023 0303 	bic.w	r3, r3, #3
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	81a3      	strh	r3, [r4, #12]
 8003cdc:	89a3      	ldrh	r3, [r4, #12]
 8003cde:	431d      	orrs	r5, r3
 8003ce0:	81a5      	strh	r5, [r4, #12]
 8003ce2:	e7cf      	b.n	8003c84 <__smakebuf_r+0x18>

08003ce4 <_fstat_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	4d07      	ldr	r5, [pc, #28]	@ (8003d04 <_fstat_r+0x20>)
 8003ce8:	2300      	movs	r3, #0
 8003cea:	4604      	mov	r4, r0
 8003cec:	4608      	mov	r0, r1
 8003cee:	4611      	mov	r1, r2
 8003cf0:	602b      	str	r3, [r5, #0]
 8003cf2:	f7fc feb1 	bl	8000a58 <_fstat>
 8003cf6:	1c43      	adds	r3, r0, #1
 8003cf8:	d102      	bne.n	8003d00 <_fstat_r+0x1c>
 8003cfa:	682b      	ldr	r3, [r5, #0]
 8003cfc:	b103      	cbz	r3, 8003d00 <_fstat_r+0x1c>
 8003cfe:	6023      	str	r3, [r4, #0]
 8003d00:	bd38      	pop	{r3, r4, r5, pc}
 8003d02:	bf00      	nop
 8003d04:	20000250 	.word	0x20000250

08003d08 <_isatty_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	4d06      	ldr	r5, [pc, #24]	@ (8003d24 <_isatty_r+0x1c>)
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	4604      	mov	r4, r0
 8003d10:	4608      	mov	r0, r1
 8003d12:	602b      	str	r3, [r5, #0]
 8003d14:	f7fc feb0 	bl	8000a78 <_isatty>
 8003d18:	1c43      	adds	r3, r0, #1
 8003d1a:	d102      	bne.n	8003d22 <_isatty_r+0x1a>
 8003d1c:	682b      	ldr	r3, [r5, #0]
 8003d1e:	b103      	cbz	r3, 8003d22 <_isatty_r+0x1a>
 8003d20:	6023      	str	r3, [r4, #0]
 8003d22:	bd38      	pop	{r3, r4, r5, pc}
 8003d24:	20000250 	.word	0x20000250

08003d28 <_sbrk_r>:
 8003d28:	b538      	push	{r3, r4, r5, lr}
 8003d2a:	4d06      	ldr	r5, [pc, #24]	@ (8003d44 <_sbrk_r+0x1c>)
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	4604      	mov	r4, r0
 8003d30:	4608      	mov	r0, r1
 8003d32:	602b      	str	r3, [r5, #0]
 8003d34:	f7fc feb8 	bl	8000aa8 <_sbrk>
 8003d38:	1c43      	adds	r3, r0, #1
 8003d3a:	d102      	bne.n	8003d42 <_sbrk_r+0x1a>
 8003d3c:	682b      	ldr	r3, [r5, #0]
 8003d3e:	b103      	cbz	r3, 8003d42 <_sbrk_r+0x1a>
 8003d40:	6023      	str	r3, [r4, #0]
 8003d42:	bd38      	pop	{r3, r4, r5, pc}
 8003d44:	20000250 	.word	0x20000250

08003d48 <_init>:
 8003d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4a:	bf00      	nop
 8003d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4e:	bc08      	pop	{r3}
 8003d50:	469e      	mov	lr, r3
 8003d52:	4770      	bx	lr

08003d54 <_fini>:
 8003d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d56:	bf00      	nop
 8003d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5a:	bc08      	pop	{r3}
 8003d5c:	469e      	mov	lr, r3
 8003d5e:	4770      	bx	lr
